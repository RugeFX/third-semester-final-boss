/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Parking Management API
 * API for managing users, parking levels, vehicles, and transactions for a parking facility.
This documentation provides a base for all the resources defined in the database schema.

 * OpenAPI spec version: 1.0.0
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useQuery } from "@tanstack/react-query";

import type { DashboardSummaryResponse } from ".././models";
import type { ErrorType } from ".././mutator/custom-instance";
import { customInstance } from ".././mutator/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Retrieves summary data for the dashboard. The response varies based on the user's role (Admin or Member).
 * @summary Get dashboard summary
 */
export const getDashboardSummary = (
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<DashboardSummaryResponse>(
		{ url: `/dashboard/summary`, method: "GET", signal },
		options,
	);
};

export const getGetDashboardSummaryQueryKey = () => {
	return [`/dashboard/summary`] as const;
};

export const getGetDashboardSummaryQueryOptions = <
	TData = Awaited<ReturnType<typeof getDashboardSummary>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<
			Awaited<ReturnType<typeof getDashboardSummary>>,
			TError,
			TData
		>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetDashboardSummaryQueryKey();

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getDashboardSummary>>
	> = ({ signal }) => getDashboardSummary(requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getDashboardSummary>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDashboardSummaryQueryResult = NonNullable<
	Awaited<ReturnType<typeof getDashboardSummary>>
>;
export type GetDashboardSummaryQueryError = ErrorType<unknown>;

export function useGetDashboardSummary<
	TData = Awaited<ReturnType<typeof getDashboardSummary>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getDashboardSummary>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getDashboardSummary>>,
					TError,
					Awaited<ReturnType<typeof getDashboardSummary>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDashboardSummary<
	TData = Awaited<ReturnType<typeof getDashboardSummary>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getDashboardSummary>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getDashboardSummary>>,
					TError,
					Awaited<ReturnType<typeof getDashboardSummary>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDashboardSummary<
	TData = Awaited<ReturnType<typeof getDashboardSummary>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getDashboardSummary>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get dashboard summary
 */

export function useGetDashboardSummary<
	TData = Awaited<ReturnType<typeof getDashboardSummary>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getDashboardSummary>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetDashboardSummaryQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
