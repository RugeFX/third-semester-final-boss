/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Parking Management API
 * API for managing users, parking levels, vehicles, and transactions for a parking facility.
This documentation provides a base for all the resources defined in the database schema.

 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import type { RequestHandlerOptions } from "msw";
import { delay, HttpResponse, http } from "msw";

import type { AuditLogArrayResponse, AuditLogResponse } from ".././models";

export const getListAuditLogsResponseMock = (
	overrideResponse: Partial<AuditLogArrayResponse> = {},
): AuditLogArrayResponse => ({
	success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	message: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			context: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			type: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				`${faker.date.past().toISOString().split(".")[0]}Z`,
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		})),
		undefined,
	]),
	...overrideResponse,
});

export const getGetAuditLogByIdResponseMock = (
	overrideResponse: Partial<AuditLogResponse> = {},
): AuditLogResponse => ({
	success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	message: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	data: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			context: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			type: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				`${faker.date.past().toISOString().split(".")[0]}Z`,
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getListAuditLogsMockHandler = (
	overrideResponse?:
		| AuditLogArrayResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<AuditLogArrayResponse> | AuditLogArrayResponse),
	options?: RequestHandlerOptions,
) => {
	return http.get(
		"*/audit-logs",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getListAuditLogsResponseMock(),
				),
				{ status: 200, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};

export const getGetAuditLogByIdMockHandler = (
	overrideResponse?:
		| AuditLogResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<AuditLogResponse> | AuditLogResponse),
	options?: RequestHandlerOptions,
) => {
	return http.get(
		"*/audit-logs/:id",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getGetAuditLogByIdResponseMock(),
				),
				{ status: 200, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};
export const getAuditLogsMock = () => [
	getListAuditLogsMockHandler(),
	getGetAuditLogByIdMockHandler(),
];
