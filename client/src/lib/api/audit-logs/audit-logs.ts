/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Parking Management API
 * API for managing users, parking levels, vehicles, and transactions for a parking facility.
This documentation provides a base for all the resources defined in the database schema.

 * OpenAPI spec version: 1.0.0
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseInfiniteQueryResult,
	DefinedUseQueryResult,
	InfiniteData,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseInfiniteQueryOptions,
	UseInfiniteQueryResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseInfiniteQueryOptions,
	UseSuspenseInfiniteQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";
import {
	useInfiniteQuery,
	useQuery,
	useSuspenseInfiniteQuery,
	useSuspenseQuery,
} from "@tanstack/react-query";

import type {
	ApiErrorResponse,
	AuditLogArrayResponse,
	AuditLogResponse,
} from ".././models";
import type { ErrorType } from ".././mutator/custom-instance";
import { customInstance } from ".././mutator/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Retrieves a list of all audit log records. Restricted to admins.
 * @summary List all audit logs (Admin only)
 */
export const listAuditLogs = (
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<AuditLogArrayResponse>(
		{ url: `/audit-logs`, method: "GET", signal },
		options,
	);
};

export const getListAuditLogsQueryKey = () => {
	return [`/audit-logs`] as const;
};

export const getListAuditLogsInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof listAuditLogs>>>,
	TError = ErrorType<ApiErrorResponse>,
>(options?: {
	query?: Partial<
		UseInfiniteQueryOptions<
			Awaited<ReturnType<typeof listAuditLogs>>,
			TError,
			TData
		>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListAuditLogsQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof listAuditLogs>>> = ({
		signal,
	}) => listAuditLogs(requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof listAuditLogs>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListAuditLogsInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof listAuditLogs>>
>;
export type ListAuditLogsInfiniteQueryError = ErrorType<ApiErrorResponse>;

export function useListAuditLogsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listAuditLogs>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listAuditLogs>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof listAuditLogs>>,
					TError,
					Awaited<ReturnType<typeof listAuditLogs>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListAuditLogsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listAuditLogs>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listAuditLogs>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof listAuditLogs>>,
					TError,
					Awaited<ReturnType<typeof listAuditLogs>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListAuditLogsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listAuditLogs>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listAuditLogs>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List all audit logs (Admin only)
 */

export function useListAuditLogsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listAuditLogs>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listAuditLogs>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListAuditLogsInfiniteQueryOptions(options);

	const query = useInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getListAuditLogsQueryOptions = <
	TData = Awaited<ReturnType<typeof listAuditLogs>>,
	TError = ErrorType<ApiErrorResponse>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof listAuditLogs>>, TError, TData>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListAuditLogsQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof listAuditLogs>>> = ({
		signal,
	}) => listAuditLogs(requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof listAuditLogs>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListAuditLogsQueryResult = NonNullable<
	Awaited<ReturnType<typeof listAuditLogs>>
>;
export type ListAuditLogsQueryError = ErrorType<ApiErrorResponse>;

export function useListAuditLogs<
	TData = Awaited<ReturnType<typeof listAuditLogs>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listAuditLogs>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof listAuditLogs>>,
					TError,
					Awaited<ReturnType<typeof listAuditLogs>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListAuditLogs<
	TData = Awaited<ReturnType<typeof listAuditLogs>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listAuditLogs>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof listAuditLogs>>,
					TError,
					Awaited<ReturnType<typeof listAuditLogs>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListAuditLogs<
	TData = Awaited<ReturnType<typeof listAuditLogs>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listAuditLogs>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List all audit logs (Admin only)
 */

export function useListAuditLogs<
	TData = Awaited<ReturnType<typeof listAuditLogs>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listAuditLogs>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListAuditLogsQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getListAuditLogsSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof listAuditLogs>>,
	TError = ErrorType<ApiErrorResponse>,
>(options?: {
	query?: Partial<
		UseSuspenseQueryOptions<
			Awaited<ReturnType<typeof listAuditLogs>>,
			TError,
			TData
		>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListAuditLogsQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof listAuditLogs>>> = ({
		signal,
	}) => listAuditLogs(requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof listAuditLogs>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListAuditLogsSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof listAuditLogs>>
>;
export type ListAuditLogsSuspenseQueryError = ErrorType<ApiErrorResponse>;

export function useListAuditLogsSuspense<
	TData = Awaited<ReturnType<typeof listAuditLogs>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof listAuditLogs>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListAuditLogsSuspense<
	TData = Awaited<ReturnType<typeof listAuditLogs>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof listAuditLogs>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListAuditLogsSuspense<
	TData = Awaited<ReturnType<typeof listAuditLogs>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof listAuditLogs>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List all audit logs (Admin only)
 */

export function useListAuditLogsSuspense<
	TData = Awaited<ReturnType<typeof listAuditLogs>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof listAuditLogs>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListAuditLogsSuspenseQueryOptions(options);

	const query = useSuspenseQuery(
		queryOptions,
		queryClient,
	) as UseSuspenseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getListAuditLogsSuspenseInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof listAuditLogs>>>,
	TError = ErrorType<ApiErrorResponse>,
>(options?: {
	query?: Partial<
		UseSuspenseInfiniteQueryOptions<
			Awaited<ReturnType<typeof listAuditLogs>>,
			TError,
			TData
		>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListAuditLogsQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof listAuditLogs>>> = ({
		signal,
	}) => listAuditLogs(requestOptions, signal);

	return {
		queryKey,
		queryFn,
		...queryOptions,
	} as UseSuspenseInfiniteQueryOptions<
		Awaited<ReturnType<typeof listAuditLogs>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListAuditLogsSuspenseInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof listAuditLogs>>
>;
export type ListAuditLogsSuspenseInfiniteQueryError =
	ErrorType<ApiErrorResponse>;

export function useListAuditLogsSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listAuditLogs>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options: {
		query: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listAuditLogs>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListAuditLogsSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listAuditLogs>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listAuditLogs>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListAuditLogsSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listAuditLogs>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listAuditLogs>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List all audit logs (Admin only)
 */

export function useListAuditLogsSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listAuditLogs>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listAuditLogs>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListAuditLogsSuspenseInfiniteQueryOptions(options);

	const query = useSuspenseInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseSuspenseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Retrieves a specific audit log by ID. Restricted to admins.
 * @summary Get audit log by ID (Admin only)
 */
export const getAuditLogById = (
	id: number,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<AuditLogResponse>(
		{ url: `/audit-logs/${id}`, method: "GET", signal },
		options,
	);
};

export const getGetAuditLogByIdQueryKey = (id?: number) => {
	return [`/audit-logs/${id}`] as const;
};

export const getGetAuditLogByIdInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getAuditLogById>>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getAuditLogById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetAuditLogByIdQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuditLogById>>> = ({
		signal,
	}) => getAuditLogById(id, requestOptions, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getAuditLogById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAuditLogByIdInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getAuditLogById>>
>;
export type GetAuditLogByIdInfiniteQueryError = ErrorType<
	ApiErrorResponse | ApiErrorResponse
>;

export function useGetAuditLogByIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getAuditLogById>>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getAuditLogById>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getAuditLogById>>,
					TError,
					Awaited<ReturnType<typeof getAuditLogById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAuditLogByIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getAuditLogById>>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getAuditLogById>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getAuditLogById>>,
					TError,
					Awaited<ReturnType<typeof getAuditLogById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAuditLogByIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getAuditLogById>>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getAuditLogById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get audit log by ID (Admin only)
 */

export function useGetAuditLogByIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getAuditLogById>>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getAuditLogById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetAuditLogByIdInfiniteQueryOptions(id, options);

	const query = useInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetAuditLogByIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getAuditLogById>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getAuditLogById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetAuditLogByIdQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuditLogById>>> = ({
		signal,
	}) => getAuditLogById(id, requestOptions, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getAuditLogById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAuditLogByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getAuditLogById>>
>;
export type GetAuditLogByIdQueryError = ErrorType<
	ApiErrorResponse | ApiErrorResponse
>;

export function useGetAuditLogById<
	TData = Awaited<ReturnType<typeof getAuditLogById>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getAuditLogById>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getAuditLogById>>,
					TError,
					Awaited<ReturnType<typeof getAuditLogById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAuditLogById<
	TData = Awaited<ReturnType<typeof getAuditLogById>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getAuditLogById>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getAuditLogById>>,
					TError,
					Awaited<ReturnType<typeof getAuditLogById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAuditLogById<
	TData = Awaited<ReturnType<typeof getAuditLogById>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getAuditLogById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get audit log by ID (Admin only)
 */

export function useGetAuditLogById<
	TData = Awaited<ReturnType<typeof getAuditLogById>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getAuditLogById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetAuditLogByIdQueryOptions(id, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetAuditLogByIdSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof getAuditLogById>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getAuditLogById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetAuditLogByIdQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuditLogById>>> = ({
		signal,
	}) => getAuditLogById(id, requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof getAuditLogById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAuditLogByIdSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof getAuditLogById>>
>;
export type GetAuditLogByIdSuspenseQueryError = ErrorType<
	ApiErrorResponse | ApiErrorResponse
>;

export function useGetAuditLogByIdSuspense<
	TData = Awaited<ReturnType<typeof getAuditLogById>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getAuditLogById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAuditLogByIdSuspense<
	TData = Awaited<ReturnType<typeof getAuditLogById>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getAuditLogById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAuditLogByIdSuspense<
	TData = Awaited<ReturnType<typeof getAuditLogById>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getAuditLogById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get audit log by ID (Admin only)
 */

export function useGetAuditLogByIdSuspense<
	TData = Awaited<ReturnType<typeof getAuditLogById>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getAuditLogById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetAuditLogByIdSuspenseQueryOptions(id, options);

	const query = useSuspenseQuery(
		queryOptions,
		queryClient,
	) as UseSuspenseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetAuditLogByIdSuspenseInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getAuditLogById>>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getAuditLogById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetAuditLogByIdQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuditLogById>>> = ({
		signal,
	}) => getAuditLogById(id, requestOptions, signal);

	return {
		queryKey,
		queryFn,
		...queryOptions,
	} as UseSuspenseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getAuditLogById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAuditLogByIdSuspenseInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getAuditLogById>>
>;
export type GetAuditLogByIdSuspenseInfiniteQueryError = ErrorType<
	ApiErrorResponse | ApiErrorResponse
>;

export function useGetAuditLogByIdSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getAuditLogById>>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options: {
		query: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getAuditLogById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAuditLogByIdSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getAuditLogById>>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getAuditLogById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAuditLogByIdSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getAuditLogById>>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getAuditLogById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get audit log by ID (Admin only)
 */

export function useGetAuditLogByIdSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getAuditLogById>>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getAuditLogById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetAuditLogByIdSuspenseInfiniteQueryOptions(
		id,
		options,
	);

	const query = useSuspenseInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseSuspenseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}
