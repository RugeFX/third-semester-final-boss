/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Parking Management API
 * API for managing users, parking levels, vehicles, and transactions for a parking facility.
This documentation provides a base for all the resources defined in the database schema.

 * OpenAPI spec version: 1.0.0
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";

import type {
	ApiErrorResponse,
	ProcessTransactionPaymentBody,
	SuccessResponse,
	TransactionArrayResponse,
	TransactionCreate,
	TransactionResponse,
	TransactionUpdate,
} from ".././models";
import type { BodyType, ErrorType } from ".././mutator/custom-instance";
import { customInstance } from ".././mutator/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Retrieves a list of all transactions. Restricted to admins.
 * @summary List all transactions (Admin only)
 */
export const listTransactions = (
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<TransactionArrayResponse>(
		{ url: `/transactions`, method: "GET", signal },
		options,
	);
};

export const getListTransactionsQueryKey = () => {
	return [`/transactions`] as const;
};

export const getListTransactionsQueryOptions = <
	TData = Awaited<ReturnType<typeof listTransactions>>,
	TError = ErrorType<ApiErrorResponse>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof listTransactions>>, TError, TData>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListTransactionsQueryKey();

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof listTransactions>>
	> = ({ signal }) => listTransactions(requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof listTransactions>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListTransactionsQueryResult = NonNullable<
	Awaited<ReturnType<typeof listTransactions>>
>;
export type ListTransactionsQueryError = ErrorType<ApiErrorResponse>;

export function useListTransactions<
	TData = Awaited<ReturnType<typeof listTransactions>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listTransactions>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof listTransactions>>,
					TError,
					Awaited<ReturnType<typeof listTransactions>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListTransactions<
	TData = Awaited<ReturnType<typeof listTransactions>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listTransactions>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof listTransactions>>,
					TError,
					Awaited<ReturnType<typeof listTransactions>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListTransactions<
	TData = Awaited<ReturnType<typeof listTransactions>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listTransactions>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List all transactions (Admin only)
 */

export function useListTransactions<
	TData = Awaited<ReturnType<typeof listTransactions>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listTransactions>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListTransactionsQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * This endpoint is called when a vehicle enters the parking facility. It creates a vehicle detail and a new transaction record.
 * @summary Create a new transaction (vehicle entry)
 */
export const createEntryTransaction = (
	transactionCreate: BodyType<TransactionCreate>,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<TransactionResponse>(
		{
			url: `/transactions/entry`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: transactionCreate,
			signal,
		},
		options,
	);
};

export const getCreateEntryTransactionMutationOptions = <
	TError = ErrorType<ApiErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createEntryTransaction>>,
		TError,
		{ data: BodyType<TransactionCreate> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createEntryTransaction>>,
	TError,
	{ data: BodyType<TransactionCreate> },
	TContext
> => {
	const mutationKey = ["createEntryTransaction"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createEntryTransaction>>,
		{ data: BodyType<TransactionCreate> }
	> = (props) => {
		const { data } = props ?? {};

		return createEntryTransaction(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateEntryTransactionMutationResult = NonNullable<
	Awaited<ReturnType<typeof createEntryTransaction>>
>;
export type CreateEntryTransactionMutationBody = BodyType<TransactionCreate>;
export type CreateEntryTransactionMutationError = ErrorType<ApiErrorResponse>;

/**
 * @summary Create a new transaction (vehicle entry)
 */
export const useCreateEntryTransaction = <
	TError = ErrorType<ApiErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createEntryTransaction>>,
			TError,
			{ data: BodyType<TransactionCreate> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof createEntryTransaction>>,
	TError,
	{ data: BodyType<TransactionCreate> },
	TContext
> => {
	const mutationOptions = getCreateEntryTransactionMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Allows a guest to retrieve the status of their active parking transaction using the access code from their ticket. This endpoint is public and does not require authentication.
 * @summary Get Transaction Status (Guest)
 */
export const getGuestTransactionByAccessCode = (
	accessCode: string,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<TransactionResponse>(
		{ url: `/transactions/${accessCode}`, method: "GET", signal },
		options,
	);
};

export const getGetGuestTransactionByAccessCodeQueryKey = (
	accessCode?: string,
) => {
	return [`/transactions/${accessCode}`] as const;
};

export const getGetGuestTransactionByAccessCodeQueryOptions = <
	TData = Awaited<ReturnType<typeof getGuestTransactionByAccessCode>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	accessCode: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getGuestTransactionByAccessCode>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ??
		getGetGuestTransactionByAccessCodeQueryKey(accessCode);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getGuestTransactionByAccessCode>>
	> = ({ signal }) =>
		getGuestTransactionByAccessCode(accessCode, requestOptions, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!accessCode,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getGuestTransactionByAccessCode>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetGuestTransactionByAccessCodeQueryResult = NonNullable<
	Awaited<ReturnType<typeof getGuestTransactionByAccessCode>>
>;
export type GetGuestTransactionByAccessCodeQueryError =
	ErrorType<ApiErrorResponse>;

export function useGetGuestTransactionByAccessCode<
	TData = Awaited<ReturnType<typeof getGuestTransactionByAccessCode>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	accessCode: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getGuestTransactionByAccessCode>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getGuestTransactionByAccessCode>>,
					TError,
					Awaited<ReturnType<typeof getGuestTransactionByAccessCode>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetGuestTransactionByAccessCode<
	TData = Awaited<ReturnType<typeof getGuestTransactionByAccessCode>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	accessCode: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getGuestTransactionByAccessCode>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getGuestTransactionByAccessCode>>,
					TError,
					Awaited<ReturnType<typeof getGuestTransactionByAccessCode>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetGuestTransactionByAccessCode<
	TData = Awaited<ReturnType<typeof getGuestTransactionByAccessCode>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	accessCode: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getGuestTransactionByAccessCode>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Transaction Status (Guest)
 */

export function useGetGuestTransactionByAccessCode<
	TData = Awaited<ReturnType<typeof getGuestTransactionByAccessCode>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	accessCode: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getGuestTransactionByAccessCode>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetGuestTransactionByAccessCodeQueryOptions(
		accessCode,
		options,
	);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Processes a payment for an active transaction and updates its status.
 * @summary Process payment for a transaction
 */
export const processTransactionPayment = (
	accessCode: string,
	processTransactionPaymentBody: BodyType<ProcessTransactionPaymentBody>,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<TransactionResponse>(
		{
			url: `/transactions/${accessCode}/payment`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: processTransactionPaymentBody,
			signal,
		},
		options,
	);
};

export const getProcessTransactionPaymentMutationOptions = <
	TError = ErrorType<ApiErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof processTransactionPayment>>,
		TError,
		{ accessCode: string; data: BodyType<ProcessTransactionPaymentBody> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof processTransactionPayment>>,
	TError,
	{ accessCode: string; data: BodyType<ProcessTransactionPaymentBody> },
	TContext
> => {
	const mutationKey = ["processTransactionPayment"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof processTransactionPayment>>,
		{ accessCode: string; data: BodyType<ProcessTransactionPaymentBody> }
	> = (props) => {
		const { accessCode, data } = props ?? {};

		return processTransactionPayment(accessCode, data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type ProcessTransactionPaymentMutationResult = NonNullable<
	Awaited<ReturnType<typeof processTransactionPayment>>
>;
export type ProcessTransactionPaymentMutationBody =
	BodyType<ProcessTransactionPaymentBody>;
export type ProcessTransactionPaymentMutationError =
	ErrorType<ApiErrorResponse>;

/**
 * @summary Process payment for a transaction
 */
export const useProcessTransactionPayment = <
	TError = ErrorType<ApiErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof processTransactionPayment>>,
			TError,
			{ accessCode: string; data: BodyType<ProcessTransactionPaymentBody> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof processTransactionPayment>>,
	TError,
	{ accessCode: string; data: BodyType<ProcessTransactionPaymentBody> },
	TContext
> => {
	const mutationOptions = getProcessTransactionPaymentMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Marks a transaction as completed when a vehicle exits the parking facility. The final fee is calculated and status updated.
 * @summary Complete a transaction (vehicle exit)
 */
export const completeTransaction = (
	accessCode: string,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<TransactionResponse>(
		{ url: `/transactions/${accessCode}/exit`, method: "POST", signal },
		options,
	);
};

export const getCompleteTransactionMutationOptions = <
	TError = ErrorType<ApiErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof completeTransaction>>,
		TError,
		{ accessCode: string },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof completeTransaction>>,
	TError,
	{ accessCode: string },
	TContext
> => {
	const mutationKey = ["completeTransaction"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof completeTransaction>>,
		{ accessCode: string }
	> = (props) => {
		const { accessCode } = props ?? {};

		return completeTransaction(accessCode, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type CompleteTransactionMutationResult = NonNullable<
	Awaited<ReturnType<typeof completeTransaction>>
>;

export type CompleteTransactionMutationError = ErrorType<ApiErrorResponse>;

/**
 * @summary Complete a transaction (vehicle exit)
 */
export const useCompleteTransaction = <
	TError = ErrorType<ApiErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof completeTransaction>>,
			TError,
			{ accessCode: string },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof completeTransaction>>,
	TError,
	{ accessCode: string },
	TContext
> => {
	const mutationOptions = getCompleteTransactionMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Allows an admin to manually update transaction details by its primary ID. Restricted to admins.
 * @summary Manually update a transaction (Admin only)
 */
export const updateTransactionById = (
	id: number,
	transactionUpdate: BodyType<TransactionUpdate>,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<TransactionResponse>(
		{
			url: `/transactions/manage/${id}`,
			method: "PUT",
			headers: { "Content-Type": "application/json" },
			data: transactionUpdate,
		},
		options,
	);
};

export const getUpdateTransactionByIdMutationOptions = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateTransactionById>>,
		TError,
		{ id: number; data: BodyType<TransactionUpdate> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateTransactionById>>,
	TError,
	{ id: number; data: BodyType<TransactionUpdate> },
	TContext
> => {
	const mutationKey = ["updateTransactionById"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateTransactionById>>,
		{ id: number; data: BodyType<TransactionUpdate> }
	> = (props) => {
		const { id, data } = props ?? {};

		return updateTransactionById(id, data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateTransactionByIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateTransactionById>>
>;
export type UpdateTransactionByIdMutationBody = BodyType<TransactionUpdate>;
export type UpdateTransactionByIdMutationError = ErrorType<
	ApiErrorResponse | ApiErrorResponse | ApiErrorResponse
>;

/**
 * @summary Manually update a transaction (Admin only)
 */
export const useUpdateTransactionById = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updateTransactionById>>,
			TError,
			{ id: number; data: BodyType<TransactionUpdate> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof updateTransactionById>>,
	TError,
	{ id: number; data: BodyType<TransactionUpdate> },
	TContext
> => {
	const mutationOptions = getUpdateTransactionByIdMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Allows an admin to delete/void a transaction by its primary ID. Restricted to admins.
 * @summary Delete a transaction (Admin only)
 */
export const deleteTransactionById = (
	id: number,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<SuccessResponse>(
		{ url: `/transactions/manage/${id}`, method: "DELETE" },
		options,
	);
};

export const getDeleteTransactionByIdMutationOptions = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteTransactionById>>,
		TError,
		{ id: number },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteTransactionById>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationKey = ["deleteTransactionById"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteTransactionById>>,
		{ id: number }
	> = (props) => {
		const { id } = props ?? {};

		return deleteTransactionById(id, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteTransactionByIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteTransactionById>>
>;

export type DeleteTransactionByIdMutationError = ErrorType<
	ApiErrorResponse | ApiErrorResponse
>;

/**
 * @summary Delete a transaction (Admin only)
 */
export const useDeleteTransactionById = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteTransactionById>>,
			TError,
			{ id: number },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteTransactionById>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationOptions = getDeleteTransactionByIdMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
