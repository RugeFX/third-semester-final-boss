/**
 * Generated by orval v7.13.0 🍺
 * Do not edit manually.
 * Parking Management API
 * API for managing users, parking levels, vehicles, and transactions for a parking facility.
This documentation provides a base for all the resources defined in the database schema.

 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import type { RequestHandlerOptions } from "msw";
import { delay, HttpResponse, http } from "msw";

import type {
	SuccessResponse,
	TransactionArrayResponse,
	TransactionResponse,
} from ".././models";

export const getListTransactionsResponseMock = (
	overrideResponse: Partial<TransactionArrayResponse> = {},
): TransactionArrayResponse => ({
	success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	message: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			status: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			paidAmount: faker.helpers.arrayElement([
				faker.helpers.arrayElement([
					faker.number.float({
						min: undefined,
						max: undefined,
						fractionDigits: 2,
					}),
					null,
				]),
				undefined,
			]),
			accessCode: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			userId: faker.helpers.arrayElement([
				faker.helpers.arrayElement([
					faker.number.int({ min: undefined, max: undefined }),
					null,
				]),
				undefined,
			]),
			vehicleDetailId: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			parkingLevelId: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				`${faker.date.past().toISOString().split(".")[0]}Z`,
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				`${faker.date.past().toISOString().split(".")[0]}Z`,
				undefined,
			]),
		})),
		undefined,
	]),
	...overrideResponse,
});

export const getCreateEntryTransactionResponseMock = (
	overrideResponse: Partial<TransactionResponse> = {},
): TransactionResponse => ({
	success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	message: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	data: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			status: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			paidAmount: faker.helpers.arrayElement([
				faker.helpers.arrayElement([
					faker.number.float({
						min: undefined,
						max: undefined,
						fractionDigits: 2,
					}),
					null,
				]),
				undefined,
			]),
			accessCode: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			userId: faker.helpers.arrayElement([
				faker.helpers.arrayElement([
					faker.number.int({ min: undefined, max: undefined }),
					null,
				]),
				undefined,
			]),
			vehicleDetailId: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			parkingLevelId: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				`${faker.date.past().toISOString().split(".")[0]}Z`,
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				`${faker.date.past().toISOString().split(".")[0]}Z`,
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getGetGuestTransactionByAccessCodeResponseMock = (
	overrideResponse: Partial<TransactionResponse> = {},
): TransactionResponse => ({
	success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	message: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	data: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			status: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			paidAmount: faker.helpers.arrayElement([
				faker.helpers.arrayElement([
					faker.number.float({
						min: undefined,
						max: undefined,
						fractionDigits: 2,
					}),
					null,
				]),
				undefined,
			]),
			accessCode: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			userId: faker.helpers.arrayElement([
				faker.helpers.arrayElement([
					faker.number.int({ min: undefined, max: undefined }),
					null,
				]),
				undefined,
			]),
			vehicleDetailId: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			parkingLevelId: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				`${faker.date.past().toISOString().split(".")[0]}Z`,
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				`${faker.date.past().toISOString().split(".")[0]}Z`,
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getProcessTransactionPaymentResponseMock = (
	overrideResponse: Partial<TransactionResponse> = {},
): TransactionResponse => ({
	success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	message: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	data: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			status: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			paidAmount: faker.helpers.arrayElement([
				faker.helpers.arrayElement([
					faker.number.float({
						min: undefined,
						max: undefined,
						fractionDigits: 2,
					}),
					null,
				]),
				undefined,
			]),
			accessCode: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			userId: faker.helpers.arrayElement([
				faker.helpers.arrayElement([
					faker.number.int({ min: undefined, max: undefined }),
					null,
				]),
				undefined,
			]),
			vehicleDetailId: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			parkingLevelId: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				`${faker.date.past().toISOString().split(".")[0]}Z`,
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				`${faker.date.past().toISOString().split(".")[0]}Z`,
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getCompleteTransactionResponseMock = (
	overrideResponse: Partial<TransactionResponse> = {},
): TransactionResponse => ({
	success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	message: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	data: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			status: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			paidAmount: faker.helpers.arrayElement([
				faker.helpers.arrayElement([
					faker.number.float({
						min: undefined,
						max: undefined,
						fractionDigits: 2,
					}),
					null,
				]),
				undefined,
			]),
			accessCode: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			userId: faker.helpers.arrayElement([
				faker.helpers.arrayElement([
					faker.number.int({ min: undefined, max: undefined }),
					null,
				]),
				undefined,
			]),
			vehicleDetailId: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			parkingLevelId: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				`${faker.date.past().toISOString().split(".")[0]}Z`,
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				`${faker.date.past().toISOString().split(".")[0]}Z`,
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getUpdateTransactionByIdResponseMock = (
	overrideResponse: Partial<TransactionResponse> = {},
): TransactionResponse => ({
	success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	message: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	data: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			status: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			paidAmount: faker.helpers.arrayElement([
				faker.helpers.arrayElement([
					faker.number.float({
						min: undefined,
						max: undefined,
						fractionDigits: 2,
					}),
					null,
				]),
				undefined,
			]),
			accessCode: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			userId: faker.helpers.arrayElement([
				faker.helpers.arrayElement([
					faker.number.int({ min: undefined, max: undefined }),
					null,
				]),
				undefined,
			]),
			vehicleDetailId: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			parkingLevelId: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				`${faker.date.past().toISOString().split(".")[0]}Z`,
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				`${faker.date.past().toISOString().split(".")[0]}Z`,
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getDeleteTransactionByIdResponseMock = (
	overrideResponse: Partial<SuccessResponse> = {},
): SuccessResponse => ({
	success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	message: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	data: faker.helpers.arrayElement([{}, undefined]),
	...overrideResponse,
});

export const getListTransactionsMockHandler = (
	overrideResponse?:
		| TransactionArrayResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<TransactionArrayResponse> | TransactionArrayResponse),
	options?: RequestHandlerOptions,
) => {
	return http.get(
		"*/transactions",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getListTransactionsResponseMock(),
				),
				{ status: 200, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};

export const getCreateEntryTransactionMockHandler = (
	overrideResponse?:
		| TransactionResponse
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<TransactionResponse> | TransactionResponse),
	options?: RequestHandlerOptions,
) => {
	return http.post(
		"*/transactions/entry",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getCreateEntryTransactionResponseMock(),
				),
				{ status: 201, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};

export const getGetGuestTransactionByAccessCodeMockHandler = (
	overrideResponse?:
		| TransactionResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<TransactionResponse> | TransactionResponse),
	options?: RequestHandlerOptions,
) => {
	return http.get(
		"*/transactions/:accessCode",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getGetGuestTransactionByAccessCodeResponseMock(),
				),
				{ status: 200, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};

export const getProcessTransactionPaymentMockHandler = (
	overrideResponse?:
		| TransactionResponse
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<TransactionResponse> | TransactionResponse),
	options?: RequestHandlerOptions,
) => {
	return http.post(
		"*/transactions/:accessCode/payment",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getProcessTransactionPaymentResponseMock(),
				),
				{ status: 200, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};

export const getCompleteTransactionMockHandler = (
	overrideResponse?:
		| TransactionResponse
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<TransactionResponse> | TransactionResponse),
	options?: RequestHandlerOptions,
) => {
	return http.post(
		"*/transactions/:accessCode/exit",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getCompleteTransactionResponseMock(),
				),
				{ status: 200, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};

export const getUpdateTransactionByIdMockHandler = (
	overrideResponse?:
		| TransactionResponse
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<TransactionResponse> | TransactionResponse),
	options?: RequestHandlerOptions,
) => {
	return http.put(
		"*/transactions/manage/:id",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getUpdateTransactionByIdResponseMock(),
				),
				{ status: 200, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};

export const getDeleteTransactionByIdMockHandler = (
	overrideResponse?:
		| SuccessResponse
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<SuccessResponse> | SuccessResponse),
	options?: RequestHandlerOptions,
) => {
	return http.delete(
		"*/transactions/manage/:id",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getDeleteTransactionByIdResponseMock(),
				),
				{ status: 200, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};
export const getTransactionsMock = () => [
	getListTransactionsMockHandler(),
	getCreateEntryTransactionMockHandler(),
	getGetGuestTransactionByAccessCodeMockHandler(),
	getProcessTransactionPaymentMockHandler(),
	getCompleteTransactionMockHandler(),
	getUpdateTransactionByIdMockHandler(),
	getDeleteTransactionByIdMockHandler(),
];
