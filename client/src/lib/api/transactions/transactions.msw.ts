/**
 * Generated by orval v7.13.0 🍺
 * Do not edit manually.
 * Parking Management API
 * API for managing users, parking levels, vehicles, and transactions for a parking facility.
This documentation provides a base for all the resources defined in the database schema.

 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import type { RequestHandlerOptions } from "msw";
import { delay, HttpResponse, http } from "msw";

import type {
	BaseResponse,
	TransactionArrayResponse,
	TransactionResponse,
} from ".././models";

export const getListTransactionsResponseMock =
	(): TransactionArrayResponse => ({
		...{
			success: faker.datatype.boolean(),
			message: faker.string.alpha({ length: { min: 10, max: 20 } }),
		},
		...{
			data: Array.from(
				{ length: faker.number.int({ min: 1, max: 10 }) },
				(_, i) => i + 1,
			).map(() => ({
				id: faker.number.int({ min: undefined, max: undefined }),
				status: faker.helpers.arrayElement(["ENTRY", "EXIT"] as const),
				paidAmount: faker.helpers.arrayElement([
					faker.number.float({
						min: undefined,
						max: undefined,
						fractionDigits: 2,
					}),
					null,
				]),
				accessCode: faker.string.alpha({ length: { min: 10, max: 20 } }),
				userId: faker.helpers.arrayElement([
					faker.number.int({ min: undefined, max: undefined }),
					null,
				]),
				vehicleDetailId: faker.number.int({ min: undefined, max: undefined }),
				parkingLevelId: faker.number.int({ min: undefined, max: undefined }),
				createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
				updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
			})),
		},
	});

export const getCreateEntryTransactionResponseMock =
	(): TransactionResponse => ({
		...{
			success: faker.datatype.boolean(),
			message: faker.string.alpha({ length: { min: 10, max: 20 } }),
		},
		...{
			data: {
				id: faker.number.int({ min: undefined, max: undefined }),
				status: faker.helpers.arrayElement(["ENTRY", "EXIT"] as const),
				paidAmount: faker.helpers.arrayElement([
					faker.number.float({
						min: undefined,
						max: undefined,
						fractionDigits: 2,
					}),
					null,
				]),
				accessCode: faker.string.alpha({ length: { min: 10, max: 20 } }),
				userId: faker.helpers.arrayElement([
					faker.number.int({ min: undefined, max: undefined }),
					null,
				]),
				vehicleDetailId: faker.number.int({ min: undefined, max: undefined }),
				parkingLevelId: faker.number.int({ min: undefined, max: undefined }),
				createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
				updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
			},
		},
	});

export const getGetGuestTransactionByAccessCodeResponseMock =
	(): TransactionResponse => ({
		...{
			success: faker.datatype.boolean(),
			message: faker.string.alpha({ length: { min: 10, max: 20 } }),
		},
		...{
			data: {
				id: faker.number.int({ min: undefined, max: undefined }),
				status: faker.helpers.arrayElement(["ENTRY", "EXIT"] as const),
				paidAmount: faker.helpers.arrayElement([
					faker.number.float({
						min: undefined,
						max: undefined,
						fractionDigits: 2,
					}),
					null,
				]),
				accessCode: faker.string.alpha({ length: { min: 10, max: 20 } }),
				userId: faker.helpers.arrayElement([
					faker.number.int({ min: undefined, max: undefined }),
					null,
				]),
				vehicleDetailId: faker.number.int({ min: undefined, max: undefined }),
				parkingLevelId: faker.number.int({ min: undefined, max: undefined }),
				createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
				updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
			},
		},
	});

export const getProcessTransactionPaymentResponseMock =
	(): TransactionResponse => ({
		...{
			success: faker.datatype.boolean(),
			message: faker.string.alpha({ length: { min: 10, max: 20 } }),
		},
		...{
			data: {
				id: faker.number.int({ min: undefined, max: undefined }),
				status: faker.helpers.arrayElement(["ENTRY", "EXIT"] as const),
				paidAmount: faker.helpers.arrayElement([
					faker.number.float({
						min: undefined,
						max: undefined,
						fractionDigits: 2,
					}),
					null,
				]),
				accessCode: faker.string.alpha({ length: { min: 10, max: 20 } }),
				userId: faker.helpers.arrayElement([
					faker.number.int({ min: undefined, max: undefined }),
					null,
				]),
				vehicleDetailId: faker.number.int({ min: undefined, max: undefined }),
				parkingLevelId: faker.number.int({ min: undefined, max: undefined }),
				createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
				updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
			},
		},
	});

export const getCompleteTransactionResponseMock = (): TransactionResponse => ({
	...{
		success: faker.datatype.boolean(),
		message: faker.string.alpha({ length: { min: 10, max: 20 } }),
	},
	...{
		data: {
			id: faker.number.int({ min: undefined, max: undefined }),
			status: faker.helpers.arrayElement(["ENTRY", "EXIT"] as const),
			paidAmount: faker.helpers.arrayElement([
				faker.number.float({
					min: undefined,
					max: undefined,
					fractionDigits: 2,
				}),
				null,
			]),
			accessCode: faker.string.alpha({ length: { min: 10, max: 20 } }),
			userId: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				null,
			]),
			vehicleDetailId: faker.number.int({ min: undefined, max: undefined }),
			parkingLevelId: faker.number.int({ min: undefined, max: undefined }),
			createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
			updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
		},
	},
});

export const getUpdateTransactionByIdResponseMock =
	(): TransactionResponse => ({
		...{
			success: faker.datatype.boolean(),
			message: faker.string.alpha({ length: { min: 10, max: 20 } }),
		},
		...{
			data: {
				id: faker.number.int({ min: undefined, max: undefined }),
				status: faker.helpers.arrayElement(["ENTRY", "EXIT"] as const),
				paidAmount: faker.helpers.arrayElement([
					faker.number.float({
						min: undefined,
						max: undefined,
						fractionDigits: 2,
					}),
					null,
				]),
				accessCode: faker.string.alpha({ length: { min: 10, max: 20 } }),
				userId: faker.helpers.arrayElement([
					faker.number.int({ min: undefined, max: undefined }),
					null,
				]),
				vehicleDetailId: faker.number.int({ min: undefined, max: undefined }),
				parkingLevelId: faker.number.int({ min: undefined, max: undefined }),
				createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
				updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
			},
		},
	});

export const getDeleteTransactionByIdResponseMock = (
	overrideResponse: Partial<BaseResponse> = {},
): BaseResponse => ({
	success: faker.datatype.boolean(),
	message: faker.string.alpha({ length: { min: 10, max: 20 } }),
	...overrideResponse,
});

export const getListTransactionsMockHandler = (
	overrideResponse?:
		| TransactionArrayResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<TransactionArrayResponse> | TransactionArrayResponse),
	options?: RequestHandlerOptions,
) => {
	return http.get(
		"*/transactions",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getListTransactionsResponseMock(),
				),
				{ status: 200, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};

export const getCreateEntryTransactionMockHandler = (
	overrideResponse?:
		| TransactionResponse
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<TransactionResponse> | TransactionResponse),
	options?: RequestHandlerOptions,
) => {
	return http.post(
		"*/transactions/entry",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getCreateEntryTransactionResponseMock(),
				),
				{ status: 201, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};

export const getGetGuestTransactionByAccessCodeMockHandler = (
	overrideResponse?:
		| TransactionResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<TransactionResponse> | TransactionResponse),
	options?: RequestHandlerOptions,
) => {
	return http.get(
		"*/transactions/:accessCode",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getGetGuestTransactionByAccessCodeResponseMock(),
				),
				{ status: 200, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};

export const getProcessTransactionPaymentMockHandler = (
	overrideResponse?:
		| TransactionResponse
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<TransactionResponse> | TransactionResponse),
	options?: RequestHandlerOptions,
) => {
	return http.post(
		"*/transactions/:accessCode/payment",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getProcessTransactionPaymentResponseMock(),
				),
				{ status: 200, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};

export const getCompleteTransactionMockHandler = (
	overrideResponse?:
		| TransactionResponse
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<TransactionResponse> | TransactionResponse),
	options?: RequestHandlerOptions,
) => {
	return http.post(
		"*/transactions/:accessCode/exit",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getCompleteTransactionResponseMock(),
				),
				{ status: 200, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};

export const getUpdateTransactionByIdMockHandler = (
	overrideResponse?:
		| TransactionResponse
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<TransactionResponse> | TransactionResponse),
	options?: RequestHandlerOptions,
) => {
	return http.put(
		"*/transactions/manage/:id",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getUpdateTransactionByIdResponseMock(),
				),
				{ status: 200, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};

export const getDeleteTransactionByIdMockHandler = (
	overrideResponse?:
		| BaseResponse
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<BaseResponse> | BaseResponse),
	options?: RequestHandlerOptions,
) => {
	return http.delete(
		"*/transactions/manage/:id",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getDeleteTransactionByIdResponseMock(),
				),
				{ status: 200, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};
export const getTransactionsMock = () => [
	getListTransactionsMockHandler(),
	getCreateEntryTransactionMockHandler(),
	getGetGuestTransactionByAccessCodeMockHandler(),
	getProcessTransactionPaymentMockHandler(),
	getCompleteTransactionMockHandler(),
	getUpdateTransactionByIdMockHandler(),
	getDeleteTransactionByIdMockHandler(),
];
