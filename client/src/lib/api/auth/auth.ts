/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Parking Management API
 * API for managing users, parking levels, vehicles, and transactions for a parking facility.
This documentation provides a base for all the resources defined in the database schema.

 * OpenAPI spec version: 1.0.0
 */

import type {
	MutationFunction,
	QueryClient,
	UseMutationOptions,
	UseMutationResult,
} from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

import type {
	ApiErrorResponse,
	LoginMember,
	TokenResponse,
	UserRegister,
	UserResponse,
} from ".././models";
import type { BodyType, ErrorType } from ".././mutator/custom-instance";
import { customInstance } from ".././mutator/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Authenticates a member or admin and returns a JWT token.
 * @summary Member or Admin Login
 */
export const loginUser = (
	loginMember: BodyType<LoginMember>,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<TokenResponse>(
		{
			url: `/auth/login`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: loginMember,
			signal,
		},
		options,
	);
};

export const getLoginUserMutationOptions = <
	TError = ErrorType<
		ApiErrorResponse | ApiErrorResponse | ApiErrorResponse | ApiErrorResponse
	>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof loginUser>>,
		TError,
		{ data: BodyType<LoginMember> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof loginUser>>,
	TError,
	{ data: BodyType<LoginMember> },
	TContext
> => {
	const mutationKey = ["loginUser"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof loginUser>>,
		{ data: BodyType<LoginMember> }
	> = (props) => {
		const { data } = props ?? {};

		return loginUser(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type LoginUserMutationResult = NonNullable<
	Awaited<ReturnType<typeof loginUser>>
>;
export type LoginUserMutationBody = BodyType<LoginMember>;
export type LoginUserMutationError = ErrorType<
	ApiErrorResponse | ApiErrorResponse | ApiErrorResponse | ApiErrorResponse
>;

/**
 * @summary Member or Admin Login
 */
export const useLoginUser = <
	TError = ErrorType<
		ApiErrorResponse | ApiErrorResponse | ApiErrorResponse | ApiErrorResponse
	>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof loginUser>>,
			TError,
			{ data: BodyType<LoginMember> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof loginUser>>,
	TError,
	{ data: BodyType<LoginMember> },
	TContext
> => {
	const mutationOptions = getLoginUserMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Allows a new user to register for an account. This automatically assigns them the 'member' role.
 * @summary Member Self-Registration
 */
export const registerUser = (
	userRegister: BodyType<UserRegister>,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<UserResponse>(
		{
			url: `/auth/register`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: userRegister,
			signal,
		},
		options,
	);
};

export const getRegisterUserMutationOptions = <
	TError = ErrorType<ApiErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof registerUser>>,
		TError,
		{ data: BodyType<UserRegister> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof registerUser>>,
	TError,
	{ data: BodyType<UserRegister> },
	TContext
> => {
	const mutationKey = ["registerUser"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof registerUser>>,
		{ data: BodyType<UserRegister> }
	> = (props) => {
		const { data } = props ?? {};

		return registerUser(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type RegisterUserMutationResult = NonNullable<
	Awaited<ReturnType<typeof registerUser>>
>;
export type RegisterUserMutationBody = BodyType<UserRegister>;
export type RegisterUserMutationError = ErrorType<ApiErrorResponse>;

/**
 * @summary Member Self-Registration
 */
export const useRegisterUser = <
	TError = ErrorType<ApiErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof registerUser>>,
			TError,
			{ data: BodyType<UserRegister> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof registerUser>>,
	TError,
	{ data: BodyType<UserRegister> },
	TContext
> => {
	const mutationOptions = getRegisterUserMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
