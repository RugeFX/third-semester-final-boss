/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Parking Management API
 * API for managing users, parking levels, vehicles, and transactions for a parking facility.
This documentation provides a base for all the resources defined in the database schema.

 * OpenAPI spec version: 1.0.0
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";

import type {
	ApiErrorResponse,
	PriceArrayResponse,
	PriceCreate,
	PriceResponse,
	SuccessResponse,
} from ".././models";
import type { BodyType, ErrorType } from ".././mutator/custom-instance";
import { customInstance } from ".././mutator/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Returns a list of all price configurations.
 * @summary List all prices
 */
export const listPrices = (
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<PriceArrayResponse>(
		{ url: `/prices`, method: "GET", signal },
		options,
	);
};

export const getListPricesQueryKey = () => {
	return [`/prices`] as const;
};

export const getListPricesQueryOptions = <
	TData = Awaited<ReturnType<typeof listPrices>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof listPrices>>, TError, TData>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListPricesQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof listPrices>>> = ({
		signal,
	}) => listPrices(requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof listPrices>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListPricesQueryResult = NonNullable<
	Awaited<ReturnType<typeof listPrices>>
>;
export type ListPricesQueryError = ErrorType<unknown>;

export function useListPrices<
	TData = Awaited<ReturnType<typeof listPrices>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listPrices>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof listPrices>>,
					TError,
					Awaited<ReturnType<typeof listPrices>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListPrices<
	TData = Awaited<ReturnType<typeof listPrices>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listPrices>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof listPrices>>,
					TError,
					Awaited<ReturnType<typeof listPrices>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListPrices<
	TData = Awaited<ReturnType<typeof listPrices>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listPrices>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List all prices
 */

export function useListPrices<
	TData = Awaited<ReturnType<typeof listPrices>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listPrices>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListPricesQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Creates a new price configuration. Restricted to admins.
 * @summary Create a price (Admin only)
 */
export const createPrice = (
	priceCreate: BodyType<PriceCreate>,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<PriceResponse>(
		{
			url: `/prices`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: priceCreate,
			signal,
		},
		options,
	);
};

export const getCreatePriceMutationOptions = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createPrice>>,
		TError,
		{ data: BodyType<PriceCreate> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createPrice>>,
	TError,
	{ data: BodyType<PriceCreate> },
	TContext
> => {
	const mutationKey = ["createPrice"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createPrice>>,
		{ data: BodyType<PriceCreate> }
	> = (props) => {
		const { data } = props ?? {};

		return createPrice(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreatePriceMutationResult = NonNullable<
	Awaited<ReturnType<typeof createPrice>>
>;
export type CreatePriceMutationBody = BodyType<PriceCreate>;
export type CreatePriceMutationError = ErrorType<
	ApiErrorResponse | ApiErrorResponse
>;

/**
 * @summary Create a price (Admin only)
 */
export const useCreatePrice = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createPrice>>,
			TError,
			{ data: BodyType<PriceCreate> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof createPrice>>,
	TError,
	{ data: BodyType<PriceCreate> },
	TContext
> => {
	const mutationOptions = getCreatePriceMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Retrieves details for a specific price configuration.
 * @summary Get price by ID
 */
export const getPriceById = (
	id: number,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<PriceResponse>(
		{ url: `/prices/${id}`, method: "GET", signal },
		options,
	);
};

export const getGetPriceByIdQueryKey = (id?: number) => {
	return [`/prices/${id}`] as const;
};

export const getGetPriceByIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getPriceById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getPriceById>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetPriceByIdQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceById>>> = ({
		signal,
	}) => getPriceById(id, requestOptions, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getPriceById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPriceByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getPriceById>>
>;
export type GetPriceByIdQueryError = ErrorType<ApiErrorResponse>;

export function useGetPriceById<
	TData = Awaited<ReturnType<typeof getPriceById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getPriceById>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getPriceById>>,
					TError,
					Awaited<ReturnType<typeof getPriceById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPriceById<
	TData = Awaited<ReturnType<typeof getPriceById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getPriceById>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getPriceById>>,
					TError,
					Awaited<ReturnType<typeof getPriceById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPriceById<
	TData = Awaited<ReturnType<typeof getPriceById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getPriceById>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get price by ID
 */

export function useGetPriceById<
	TData = Awaited<ReturnType<typeof getPriceById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getPriceById>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetPriceByIdQueryOptions(id, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Updates a price configuration. Restricted to admins.
 * @summary Update a price (Admin only)
 */
export const updatePrice = (
	id: number,
	priceCreate: BodyType<PriceCreate>,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<PriceResponse>(
		{
			url: `/prices/${id}`,
			method: "PUT",
			headers: { "Content-Type": "application/json" },
			data: priceCreate,
		},
		options,
	);
};

export const getUpdatePriceMutationOptions = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updatePrice>>,
		TError,
		{ id: number; data: BodyType<PriceCreate> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updatePrice>>,
	TError,
	{ id: number; data: BodyType<PriceCreate> },
	TContext
> => {
	const mutationKey = ["updatePrice"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updatePrice>>,
		{ id: number; data: BodyType<PriceCreate> }
	> = (props) => {
		const { id, data } = props ?? {};

		return updatePrice(id, data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdatePriceMutationResult = NonNullable<
	Awaited<ReturnType<typeof updatePrice>>
>;
export type UpdatePriceMutationBody = BodyType<PriceCreate>;
export type UpdatePriceMutationError = ErrorType<
	ApiErrorResponse | ApiErrorResponse | ApiErrorResponse
>;

/**
 * @summary Update a price (Admin only)
 */
export const useUpdatePrice = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updatePrice>>,
			TError,
			{ id: number; data: BodyType<PriceCreate> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof updatePrice>>,
	TError,
	{ id: number; data: BodyType<PriceCreate> },
	TContext
> => {
	const mutationOptions = getUpdatePriceMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Deletes a price configuration. Restricted to admins.
 * @summary Delete a price (Admin only)
 */
export const deletePrice = (
	id: number,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<SuccessResponse>(
		{ url: `/prices/${id}`, method: "DELETE" },
		options,
	);
};

export const getDeletePriceMutationOptions = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deletePrice>>,
		TError,
		{ id: number },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deletePrice>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationKey = ["deletePrice"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deletePrice>>,
		{ id: number }
	> = (props) => {
		const { id } = props ?? {};

		return deletePrice(id, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeletePriceMutationResult = NonNullable<
	Awaited<ReturnType<typeof deletePrice>>
>;

export type DeletePriceMutationError = ErrorType<
	ApiErrorResponse | ApiErrorResponse
>;

/**
 * @summary Delete a price (Admin only)
 */
export const useDeletePrice = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deletePrice>>,
			TError,
			{ id: number },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deletePrice>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationOptions = getDeletePriceMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
