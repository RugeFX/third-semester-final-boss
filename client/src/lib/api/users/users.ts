/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Parking Management API
 * API for managing users, parking levels, vehicles, and transactions for a parking facility.
This documentation provides a base for all the resources defined in the database schema.

 * OpenAPI spec version: 1.0.0
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseInfiniteQueryResult,
	DefinedUseQueryResult,
	InfiniteData,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseInfiniteQueryOptions,
	UseInfiniteQueryResult,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseInfiniteQueryOptions,
	UseSuspenseInfiniteQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";
import {
	useInfiniteQuery,
	useMutation,
	useQuery,
	useSuspenseInfiniteQuery,
	useSuspenseQuery,
} from "@tanstack/react-query";

import type {
	ApiErrorResponse,
	BaseResponse,
	PasswordChange,
	PasswordReset,
	UserArrayResponse,
	UserCreate,
	UserResponse,
	UserUpdate,
} from ".././models";
import type { BodyType, ErrorType } from ".././mutator/custom-instance";
import { customInstance } from ".././mutator/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Retrieves a list of all user accounts. This operation is restricted to admin users.
 * @summary List all users (Admin only)
 */
export const listUsers = (
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<UserArrayResponse>(
		{ url: `/users`, method: "GET", signal },
		options,
	);
};

export const getListUsersQueryKey = () => {
	return [`/users`] as const;
};

export const getListUsersInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof listUsers>>>,
	TError = ErrorType<ApiErrorResponse>,
>(options?: {
	query?: Partial<
		UseInfiniteQueryOptions<
			Awaited<ReturnType<typeof listUsers>>,
			TError,
			TData
		>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListUsersQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof listUsers>>> = ({
		signal,
	}) => listUsers(requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof listUsers>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListUsersInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof listUsers>>
>;
export type ListUsersInfiniteQueryError = ErrorType<ApiErrorResponse>;

export function useListUsersInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listUsers>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listUsers>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof listUsers>>,
					TError,
					Awaited<ReturnType<typeof listUsers>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListUsersInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listUsers>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listUsers>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof listUsers>>,
					TError,
					Awaited<ReturnType<typeof listUsers>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListUsersInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listUsers>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listUsers>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List all users (Admin only)
 */

export function useListUsersInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listUsers>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listUsers>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListUsersInfiniteQueryOptions(options);

	const query = useInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getListUsersQueryOptions = <
	TData = Awaited<ReturnType<typeof listUsers>>,
	TError = ErrorType<ApiErrorResponse>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListUsersQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof listUsers>>> = ({
		signal,
	}) => listUsers(requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof listUsers>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListUsersQueryResult = NonNullable<
	Awaited<ReturnType<typeof listUsers>>
>;
export type ListUsersQueryError = ErrorType<ApiErrorResponse>;

export function useListUsers<
	TData = Awaited<ReturnType<typeof listUsers>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof listUsers>>,
					TError,
					Awaited<ReturnType<typeof listUsers>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListUsers<
	TData = Awaited<ReturnType<typeof listUsers>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof listUsers>>,
					TError,
					Awaited<ReturnType<typeof listUsers>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListUsers<
	TData = Awaited<ReturnType<typeof listUsers>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List all users (Admin only)
 */

export function useListUsers<
	TData = Awaited<ReturnType<typeof listUsers>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListUsersQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getListUsersSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof listUsers>>,
	TError = ErrorType<ApiErrorResponse>,
>(options?: {
	query?: Partial<
		UseSuspenseQueryOptions<
			Awaited<ReturnType<typeof listUsers>>,
			TError,
			TData
		>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListUsersQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof listUsers>>> = ({
		signal,
	}) => listUsers(requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof listUsers>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListUsersSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof listUsers>>
>;
export type ListUsersSuspenseQueryError = ErrorType<ApiErrorResponse>;

export function useListUsersSuspense<
	TData = Awaited<ReturnType<typeof listUsers>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof listUsers>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListUsersSuspense<
	TData = Awaited<ReturnType<typeof listUsers>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof listUsers>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListUsersSuspense<
	TData = Awaited<ReturnType<typeof listUsers>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof listUsers>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List all users (Admin only)
 */

export function useListUsersSuspense<
	TData = Awaited<ReturnType<typeof listUsers>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof listUsers>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListUsersSuspenseQueryOptions(options);

	const query = useSuspenseQuery(
		queryOptions,
		queryClient,
	) as UseSuspenseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getListUsersSuspenseInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof listUsers>>>,
	TError = ErrorType<ApiErrorResponse>,
>(options?: {
	query?: Partial<
		UseSuspenseInfiniteQueryOptions<
			Awaited<ReturnType<typeof listUsers>>,
			TError,
			TData
		>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListUsersQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof listUsers>>> = ({
		signal,
	}) => listUsers(requestOptions, signal);

	return {
		queryKey,
		queryFn,
		...queryOptions,
	} as UseSuspenseInfiniteQueryOptions<
		Awaited<ReturnType<typeof listUsers>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListUsersSuspenseInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof listUsers>>
>;
export type ListUsersSuspenseInfiniteQueryError = ErrorType<ApiErrorResponse>;

export function useListUsersSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listUsers>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options: {
		query: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listUsers>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListUsersSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listUsers>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listUsers>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListUsersSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listUsers>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listUsers>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List all users (Admin only)
 */

export function useListUsersSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listUsers>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listUsers>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListUsersSuspenseInfiniteQueryOptions(options);

	const query = useSuspenseInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseSuspenseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Creates a new user account in the system. This operation is restricted to admin users.
 * @summary Create a new user (Admin only)
 */
export const createUser = (
	userCreate: BodyType<UserCreate>,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<UserResponse>(
		{
			url: `/users`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: userCreate,
			signal,
		},
		options,
	);
};

export const getCreateUserMutationOptions = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createUser>>,
		TError,
		{ data: BodyType<UserCreate> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createUser>>,
	TError,
	{ data: BodyType<UserCreate> },
	TContext
> => {
	const mutationKey = ["createUser"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createUser>>,
		{ data: BodyType<UserCreate> }
	> = (props) => {
		const { data } = props ?? {};

		return createUser(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateUserMutationResult = NonNullable<
	Awaited<ReturnType<typeof createUser>>
>;
export type CreateUserMutationBody = BodyType<UserCreate>;
export type CreateUserMutationError = ErrorType<
	ApiErrorResponse | ApiErrorResponse
>;

/**
 * @summary Create a new user (Admin only)
 */
export const useCreateUser = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createUser>>,
			TError,
			{ data: BodyType<UserCreate> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof createUser>>,
	TError,
	{ data: BodyType<UserCreate> },
	TContext
> => {
	const mutationOptions = getCreateUserMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Retrieves the details of a specific user by their unique ID. This operation is restricted to admin users.
 * @summary Get user by ID (Admin only)
 */
export const getUserById = (
	id: number,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<UserResponse>(
		{ url: `/users/${id}`, method: "GET", signal },
		options,
	);
};

export const getGetUserByIdQueryKey = (id?: number) => {
	return [`/users/${id}`] as const;
};

export const getGetUserByIdInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getUserById>>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getUserById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetUserByIdQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserById>>> = ({
		signal,
	}) => getUserById(id, requestOptions, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getUserById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUserByIdInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getUserById>>
>;
export type GetUserByIdInfiniteQueryError = ErrorType<
	ApiErrorResponse | ApiErrorResponse
>;

export function useGetUserByIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getUserById>>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getUserById>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getUserById>>,
					TError,
					Awaited<ReturnType<typeof getUserById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserByIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getUserById>>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getUserById>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getUserById>>,
					TError,
					Awaited<ReturnType<typeof getUserById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserByIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getUserById>>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getUserById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user by ID (Admin only)
 */

export function useGetUserByIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getUserById>>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getUserById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetUserByIdInfiniteQueryOptions(id, options);

	const query = useInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetUserByIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getUserById>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetUserByIdQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserById>>> = ({
		signal,
	}) => getUserById(id, requestOptions, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getUserById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUserByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getUserById>>
>;
export type GetUserByIdQueryError = ErrorType<
	ApiErrorResponse | ApiErrorResponse
>;

export function useGetUserById<
	TData = Awaited<ReturnType<typeof getUserById>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getUserById>>,
					TError,
					Awaited<ReturnType<typeof getUserById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserById<
	TData = Awaited<ReturnType<typeof getUserById>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getUserById>>,
					TError,
					Awaited<ReturnType<typeof getUserById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserById<
	TData = Awaited<ReturnType<typeof getUserById>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user by ID (Admin only)
 */

export function useGetUserById<
	TData = Awaited<ReturnType<typeof getUserById>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetUserByIdQueryOptions(id, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetUserByIdSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof getUserById>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getUserById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetUserByIdQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserById>>> = ({
		signal,
	}) => getUserById(id, requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof getUserById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUserByIdSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof getUserById>>
>;
export type GetUserByIdSuspenseQueryError = ErrorType<
	ApiErrorResponse | ApiErrorResponse
>;

export function useGetUserByIdSuspense<
	TData = Awaited<ReturnType<typeof getUserById>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getUserById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserByIdSuspense<
	TData = Awaited<ReturnType<typeof getUserById>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getUserById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserByIdSuspense<
	TData = Awaited<ReturnType<typeof getUserById>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getUserById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user by ID (Admin only)
 */

export function useGetUserByIdSuspense<
	TData = Awaited<ReturnType<typeof getUserById>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getUserById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetUserByIdSuspenseQueryOptions(id, options);

	const query = useSuspenseQuery(
		queryOptions,
		queryClient,
	) as UseSuspenseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetUserByIdSuspenseInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getUserById>>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getUserById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetUserByIdQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserById>>> = ({
		signal,
	}) => getUserById(id, requestOptions, signal);

	return {
		queryKey,
		queryFn,
		...queryOptions,
	} as UseSuspenseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getUserById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUserByIdSuspenseInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getUserById>>
>;
export type GetUserByIdSuspenseInfiniteQueryError = ErrorType<
	ApiErrorResponse | ApiErrorResponse
>;

export function useGetUserByIdSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getUserById>>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options: {
		query: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getUserById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserByIdSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getUserById>>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getUserById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserByIdSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getUserById>>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getUserById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user by ID (Admin only)
 */

export function useGetUserByIdSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getUserById>>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getUserById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetUserByIdSuspenseInfiniteQueryOptions(id, options);

	const query = useSuspenseInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseSuspenseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Updates a user's details. This operation is restricted to admin users.
 * @summary Update a user (Admin only)
 */
export const updateUser = (
	id: number,
	userUpdate: BodyType<UserUpdate>,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<UserResponse>(
		{
			url: `/users/${id}`,
			method: "PUT",
			headers: { "Content-Type": "application/json" },
			data: userUpdate,
		},
		options,
	);
};

export const getUpdateUserMutationOptions = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateUser>>,
		TError,
		{ id: number; data: BodyType<UserUpdate> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateUser>>,
	TError,
	{ id: number; data: BodyType<UserUpdate> },
	TContext
> => {
	const mutationKey = ["updateUser"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateUser>>,
		{ id: number; data: BodyType<UserUpdate> }
	> = (props) => {
		const { id, data } = props ?? {};

		return updateUser(id, data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateUserMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateUser>>
>;
export type UpdateUserMutationBody = BodyType<UserUpdate>;
export type UpdateUserMutationError = ErrorType<
	ApiErrorResponse | ApiErrorResponse | ApiErrorResponse
>;

/**
 * @summary Update a user (Admin only)
 */
export const useUpdateUser = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updateUser>>,
			TError,
			{ id: number; data: BodyType<UserUpdate> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof updateUser>>,
	TError,
	{ id: number; data: BodyType<UserUpdate> },
	TContext
> => {
	const mutationOptions = getUpdateUserMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Deletes a user from the system. This operation is restricted to admin users.
 * @summary Delete a user (Admin only)
 */
export const deleteUser = (
	id: number,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<UserResponse>(
		{ url: `/users/${id}`, method: "DELETE" },
		options,
	);
};

export const getDeleteUserMutationOptions = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteUser>>,
		TError,
		{ id: number },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteUser>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationKey = ["deleteUser"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteUser>>,
		{ id: number }
	> = (props) => {
		const { id } = props ?? {};

		return deleteUser(id, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteUserMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteUser>>
>;

export type DeleteUserMutationError = ErrorType<
	ApiErrorResponse | ApiErrorResponse
>;

/**
 * @summary Delete a user (Admin only)
 */
export const useDeleteUser = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteUser>>,
			TError,
			{ id: number },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteUser>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationOptions = getDeleteUserMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Allows an admin to forcibly reset the password for any user.
 * @summary Reset a user's password (Admin only)
 */
export const resetUserPassword = (
	id: number,
	passwordReset: BodyType<PasswordReset>,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<BaseResponse>(
		{
			url: `/users/${id}/password`,
			method: "PUT",
			headers: { "Content-Type": "application/json" },
			data: passwordReset,
		},
		options,
	);
};

export const getResetUserPasswordMutationOptions = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof resetUserPassword>>,
		TError,
		{ id: number; data: BodyType<PasswordReset> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof resetUserPassword>>,
	TError,
	{ id: number; data: BodyType<PasswordReset> },
	TContext
> => {
	const mutationKey = ["resetUserPassword"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof resetUserPassword>>,
		{ id: number; data: BodyType<PasswordReset> }
	> = (props) => {
		const { id, data } = props ?? {};

		return resetUserPassword(id, data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type ResetUserPasswordMutationResult = NonNullable<
	Awaited<ReturnType<typeof resetUserPassword>>
>;
export type ResetUserPasswordMutationBody = BodyType<PasswordReset>;
export type ResetUserPasswordMutationError = ErrorType<
	ApiErrorResponse | ApiErrorResponse | ApiErrorResponse
>;

/**
 * @summary Reset a user's password (Admin only)
 */
export const useResetUserPassword = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof resetUserPassword>>,
			TError,
			{ id: number; data: BodyType<PasswordReset> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof resetUserPassword>>,
	TError,
	{ id: number; data: BodyType<PasswordReset> },
	TContext
> => {
	const mutationOptions = getResetUserPasswordMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Allows the currently authenticated user (admin or member) to change their own password.
 * @summary Change current user's password
 */
export const changeCurrentUserPassword = (
	passwordChange: BodyType<PasswordChange>,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<BaseResponse>(
		{
			url: `/users/me/change-password`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: passwordChange,
			signal,
		},
		options,
	);
};

export const getChangeCurrentUserPasswordMutationOptions = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof changeCurrentUserPassword>>,
		TError,
		{ data: BodyType<PasswordChange> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof changeCurrentUserPassword>>,
	TError,
	{ data: BodyType<PasswordChange> },
	TContext
> => {
	const mutationKey = ["changeCurrentUserPassword"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof changeCurrentUserPassword>>,
		{ data: BodyType<PasswordChange> }
	> = (props) => {
		const { data } = props ?? {};

		return changeCurrentUserPassword(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type ChangeCurrentUserPasswordMutationResult = NonNullable<
	Awaited<ReturnType<typeof changeCurrentUserPassword>>
>;
export type ChangeCurrentUserPasswordMutationBody = BodyType<PasswordChange>;
export type ChangeCurrentUserPasswordMutationError = ErrorType<
	ApiErrorResponse | ApiErrorResponse
>;

/**
 * @summary Change current user's password
 */
export const useChangeCurrentUserPassword = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof changeCurrentUserPassword>>,
			TError,
			{ data: BodyType<PasswordChange> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof changeCurrentUserPassword>>,
	TError,
	{ data: BodyType<PasswordChange> },
	TContext
> => {
	const mutationOptions = getChangeCurrentUserPasswordMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
