/**
 * Generated by orval v7.13.0 🍺
 * Do not edit manually.
 * Parking Management API
 * API for managing users, parking levels, vehicles, and transactions for a parking facility.
This documentation provides a base for all the resources defined in the database schema.

 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import type { RequestHandlerOptions } from "msw";
import { delay, HttpResponse, http } from "msw";

import type {
	BaseResponse,
	UserArrayResponse,
	UserResponse,
} from ".././models";

export const getListUsersResponseMock = (): UserArrayResponse => ({
	...{
		success: faker.datatype.boolean(),
		message: faker.string.alpha({ length: { min: 10, max: 20 } }),
	},
	...{
		data: Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			id: faker.number.int({ min: undefined, max: undefined }),
			fullname: faker.string.alpha({ length: { min: 10, max: 20 } }),
			username: faker.string.alpha({ length: { min: 10, max: 20 } }),
			role: faker.helpers.arrayElement(["admin", "member"] as const),
		})),
	},
});

export const getCreateUserResponseMock = (): UserResponse => ({
	...{
		success: faker.datatype.boolean(),
		message: faker.string.alpha({ length: { min: 10, max: 20 } }),
	},
	...{
		data: faker.helpers.arrayElement([
			{
				id: faker.number.int({ min: undefined, max: undefined }),
				fullname: faker.string.alpha({ length: { min: 10, max: 20 } }),
				username: faker.string.alpha({ length: { min: 10, max: 20 } }),
				role: faker.helpers.arrayElement(["admin", "member"] as const),
			},
			undefined,
		]),
	},
});

export const getGetUserByIdResponseMock = (): UserResponse => ({
	...{
		success: faker.datatype.boolean(),
		message: faker.string.alpha({ length: { min: 10, max: 20 } }),
	},
	...{
		data: faker.helpers.arrayElement([
			{
				id: faker.number.int({ min: undefined, max: undefined }),
				fullname: faker.string.alpha({ length: { min: 10, max: 20 } }),
				username: faker.string.alpha({ length: { min: 10, max: 20 } }),
				role: faker.helpers.arrayElement(["admin", "member"] as const),
			},
			undefined,
		]),
	},
});

export const getUpdateUserResponseMock = (): UserResponse => ({
	...{
		success: faker.datatype.boolean(),
		message: faker.string.alpha({ length: { min: 10, max: 20 } }),
	},
	...{
		data: faker.helpers.arrayElement([
			{
				id: faker.number.int({ min: undefined, max: undefined }),
				fullname: faker.string.alpha({ length: { min: 10, max: 20 } }),
				username: faker.string.alpha({ length: { min: 10, max: 20 } }),
				role: faker.helpers.arrayElement(["admin", "member"] as const),
			},
			undefined,
		]),
	},
});

export const getDeleteUserResponseMock = (
	overrideResponse: Partial<BaseResponse> = {},
): BaseResponse => ({
	success: faker.datatype.boolean(),
	message: faker.string.alpha({ length: { min: 10, max: 20 } }),
	...overrideResponse,
});

export const getListUsersMockHandler = (
	overrideResponse?:
		| UserArrayResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<UserArrayResponse> | UserArrayResponse),
	options?: RequestHandlerOptions,
) => {
	return http.get(
		"*/users",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getListUsersResponseMock(),
				),
				{ status: 200, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};

export const getCreateUserMockHandler = (
	overrideResponse?:
		| UserResponse
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<UserResponse> | UserResponse),
	options?: RequestHandlerOptions,
) => {
	return http.post(
		"*/users",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getCreateUserResponseMock(),
				),
				{ status: 201, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};

export const getGetUserByIdMockHandler = (
	overrideResponse?:
		| UserResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<UserResponse> | UserResponse),
	options?: RequestHandlerOptions,
) => {
	return http.get(
		"*/users/:id",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getGetUserByIdResponseMock(),
				),
				{ status: 200, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};

export const getUpdateUserMockHandler = (
	overrideResponse?:
		| UserResponse
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<UserResponse> | UserResponse),
	options?: RequestHandlerOptions,
) => {
	return http.put(
		"*/users/:id",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getUpdateUserResponseMock(),
				),
				{ status: 200, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};

export const getDeleteUserMockHandler = (
	overrideResponse?:
		| BaseResponse
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<BaseResponse> | BaseResponse),
	options?: RequestHandlerOptions,
) => {
	return http.delete(
		"*/users/:id",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getDeleteUserResponseMock(),
				),
				{ status: 200, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};
export const getUsersMock = () => [
	getListUsersMockHandler(),
	getCreateUserMockHandler(),
	getGetUserByIdMockHandler(),
	getUpdateUserMockHandler(),
	getDeleteUserMockHandler(),
];
