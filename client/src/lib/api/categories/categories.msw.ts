/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Parking Management API
 * API for managing users, parking levels, vehicles, and transactions for a parking facility.
This documentation provides a base for all the resources defined in the database schema.

 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import type { RequestHandlerOptions } from "msw";
import { delay, HttpResponse, http } from "msw";

import type {
	CategoryArrayResponse,
	CategoryResponse,
	SuccessResponse,
} from ".././models";

export const getListCategoriesResponseMock = (
	overrideResponse: Partial<CategoryArrayResponse> = {},
): CategoryArrayResponse => ({
	success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	message: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			weight: faker.helpers.arrayElement([
				faker.number.float({
					min: undefined,
					max: undefined,
					fractionDigits: 2,
				}),
				undefined,
			]),
		})),
		undefined,
	]),
	...overrideResponse,
});

export const getCreateCategoryResponseMock = (
	overrideResponse: Partial<CategoryResponse> = {},
): CategoryResponse => ({
	success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	message: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	data: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			weight: faker.helpers.arrayElement([
				faker.number.float({
					min: undefined,
					max: undefined,
					fractionDigits: 2,
				}),
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getGetCategoryByIdResponseMock = (
	overrideResponse: Partial<CategoryResponse> = {},
): CategoryResponse => ({
	success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	message: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	data: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			weight: faker.helpers.arrayElement([
				faker.number.float({
					min: undefined,
					max: undefined,
					fractionDigits: 2,
				}),
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getUpdateCategoryResponseMock = (
	overrideResponse: Partial<CategoryResponse> = {},
): CategoryResponse => ({
	success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	message: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	data: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			weight: faker.helpers.arrayElement([
				faker.number.float({
					min: undefined,
					max: undefined,
					fractionDigits: 2,
				}),
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getDeleteCategoryResponseMock = (
	overrideResponse: Partial<SuccessResponse> = {},
): SuccessResponse => ({
	success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	message: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	data: faker.helpers.arrayElement([{}, undefined]),
	...overrideResponse,
});

export const getListCategoriesMockHandler = (
	overrideResponse?:
		| CategoryArrayResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<CategoryArrayResponse> | CategoryArrayResponse),
	options?: RequestHandlerOptions,
) => {
	return http.get(
		"*/categories",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getListCategoriesResponseMock(),
				),
				{ status: 200, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};

export const getCreateCategoryMockHandler = (
	overrideResponse?:
		| CategoryResponse
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<CategoryResponse> | CategoryResponse),
	options?: RequestHandlerOptions,
) => {
	return http.post(
		"*/categories",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getCreateCategoryResponseMock(),
				),
				{ status: 201, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};

export const getGetCategoryByIdMockHandler = (
	overrideResponse?:
		| CategoryResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<CategoryResponse> | CategoryResponse),
	options?: RequestHandlerOptions,
) => {
	return http.get(
		"*/categories/:id",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getGetCategoryByIdResponseMock(),
				),
				{ status: 200, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};

export const getUpdateCategoryMockHandler = (
	overrideResponse?:
		| CategoryResponse
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<CategoryResponse> | CategoryResponse),
	options?: RequestHandlerOptions,
) => {
	return http.put(
		"*/categories/:id",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getUpdateCategoryResponseMock(),
				),
				{ status: 200, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};

export const getDeleteCategoryMockHandler = (
	overrideResponse?:
		| SuccessResponse
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<SuccessResponse> | SuccessResponse),
	options?: RequestHandlerOptions,
) => {
	return http.delete(
		"*/categories/:id",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getDeleteCategoryResponseMock(),
				),
				{ status: 200, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};
export const getCategoriesMock = () => [
	getListCategoriesMockHandler(),
	getCreateCategoryMockHandler(),
	getGetCategoryByIdMockHandler(),
	getUpdateCategoryMockHandler(),
	getDeleteCategoryMockHandler(),
];
