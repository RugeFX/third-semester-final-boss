/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Parking Management API
 * API for managing users, parking levels, vehicles, and transactions for a parking facility.
This documentation provides a base for all the resources defined in the database schema.

 * OpenAPI spec version: 1.0.0
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseInfiniteQueryResult,
	DefinedUseQueryResult,
	InfiniteData,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseInfiniteQueryOptions,
	UseInfiniteQueryResult,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseInfiniteQueryOptions,
	UseSuspenseInfiniteQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";
import {
	useInfiniteQuery,
	useMutation,
	useQuery,
	useSuspenseInfiniteQuery,
	useSuspenseQuery,
} from "@tanstack/react-query";

import type {
	ApiErrorResponse,
	BaseResponse,
	CategoryArrayResponse,
	CategoryCreate,
	CategoryResponse,
} from ".././models";
import type { BodyType, ErrorType } from ".././mutator/custom-instance";
import { customInstance } from ".././mutator/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Returns a list of all vehicle categories.
 * @summary List all vehicle categories
 */
export const listCategories = (
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<CategoryArrayResponse>(
		{ url: `/categories`, method: "GET", signal },
		options,
	);
};

export const getListCategoriesQueryKey = () => {
	return [`/categories`] as const;
};

export const getListCategoriesInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof listCategories>>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseInfiniteQueryOptions<
			Awaited<ReturnType<typeof listCategories>>,
			TError,
			TData
		>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListCategoriesQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof listCategories>>> = ({
		signal,
	}) => listCategories(requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof listCategories>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListCategoriesInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof listCategories>>
>;
export type ListCategoriesInfiniteQueryError = ErrorType<unknown>;

export function useListCategoriesInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listCategories>>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listCategories>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof listCategories>>,
					TError,
					Awaited<ReturnType<typeof listCategories>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListCategoriesInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listCategories>>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listCategories>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof listCategories>>,
					TError,
					Awaited<ReturnType<typeof listCategories>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListCategoriesInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listCategories>>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listCategories>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List all vehicle categories
 */

export function useListCategoriesInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listCategories>>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listCategories>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListCategoriesInfiniteQueryOptions(options);

	const query = useInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getListCategoriesQueryOptions = <
	TData = Awaited<ReturnType<typeof listCategories>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof listCategories>>, TError, TData>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListCategoriesQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof listCategories>>> = ({
		signal,
	}) => listCategories(requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof listCategories>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListCategoriesQueryResult = NonNullable<
	Awaited<ReturnType<typeof listCategories>>
>;
export type ListCategoriesQueryError = ErrorType<unknown>;

export function useListCategories<
	TData = Awaited<ReturnType<typeof listCategories>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listCategories>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof listCategories>>,
					TError,
					Awaited<ReturnType<typeof listCategories>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListCategories<
	TData = Awaited<ReturnType<typeof listCategories>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listCategories>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof listCategories>>,
					TError,
					Awaited<ReturnType<typeof listCategories>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListCategories<
	TData = Awaited<ReturnType<typeof listCategories>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listCategories>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List all vehicle categories
 */

export function useListCategories<
	TData = Awaited<ReturnType<typeof listCategories>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listCategories>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListCategoriesQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getListCategoriesSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof listCategories>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseSuspenseQueryOptions<
			Awaited<ReturnType<typeof listCategories>>,
			TError,
			TData
		>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListCategoriesQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof listCategories>>> = ({
		signal,
	}) => listCategories(requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof listCategories>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListCategoriesSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof listCategories>>
>;
export type ListCategoriesSuspenseQueryError = ErrorType<unknown>;

export function useListCategoriesSuspense<
	TData = Awaited<ReturnType<typeof listCategories>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof listCategories>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListCategoriesSuspense<
	TData = Awaited<ReturnType<typeof listCategories>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof listCategories>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListCategoriesSuspense<
	TData = Awaited<ReturnType<typeof listCategories>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof listCategories>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List all vehicle categories
 */

export function useListCategoriesSuspense<
	TData = Awaited<ReturnType<typeof listCategories>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof listCategories>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListCategoriesSuspenseQueryOptions(options);

	const query = useSuspenseQuery(
		queryOptions,
		queryClient,
	) as UseSuspenseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getListCategoriesSuspenseInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof listCategories>>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseSuspenseInfiniteQueryOptions<
			Awaited<ReturnType<typeof listCategories>>,
			TError,
			TData
		>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListCategoriesQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof listCategories>>> = ({
		signal,
	}) => listCategories(requestOptions, signal);

	return {
		queryKey,
		queryFn,
		...queryOptions,
	} as UseSuspenseInfiniteQueryOptions<
		Awaited<ReturnType<typeof listCategories>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListCategoriesSuspenseInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof listCategories>>
>;
export type ListCategoriesSuspenseInfiniteQueryError = ErrorType<unknown>;

export function useListCategoriesSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listCategories>>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listCategories>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListCategoriesSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listCategories>>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listCategories>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListCategoriesSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listCategories>>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listCategories>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List all vehicle categories
 */

export function useListCategoriesSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listCategories>>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listCategories>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListCategoriesSuspenseInfiniteQueryOptions(options);

	const query = useSuspenseInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseSuspenseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Creates a new vehicle category. Restricted to admins.
 * @summary Create a vehicle category (Admin only)
 */
export const createCategory = (
	categoryCreate: BodyType<CategoryCreate>,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<CategoryResponse>(
		{
			url: `/categories`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: categoryCreate,
			signal,
		},
		options,
	);
};

export const getCreateCategoryMutationOptions = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createCategory>>,
		TError,
		{ data: BodyType<CategoryCreate> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createCategory>>,
	TError,
	{ data: BodyType<CategoryCreate> },
	TContext
> => {
	const mutationKey = ["createCategory"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createCategory>>,
		{ data: BodyType<CategoryCreate> }
	> = (props) => {
		const { data } = props ?? {};

		return createCategory(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateCategoryMutationResult = NonNullable<
	Awaited<ReturnType<typeof createCategory>>
>;
export type CreateCategoryMutationBody = BodyType<CategoryCreate>;
export type CreateCategoryMutationError = ErrorType<
	ApiErrorResponse | ApiErrorResponse
>;

/**
 * @summary Create a vehicle category (Admin only)
 */
export const useCreateCategory = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createCategory>>,
			TError,
			{ data: BodyType<CategoryCreate> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof createCategory>>,
	TError,
	{ data: BodyType<CategoryCreate> },
	TContext
> => {
	const mutationOptions = getCreateCategoryMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Retrieves details for a specific vehicle category.
 * @summary Get category by ID
 */
export const getCategoryById = (
	id: number,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<CategoryResponse>(
		{ url: `/categories/${id}`, method: "GET", signal },
		options,
	);
};

export const getGetCategoryByIdQueryKey = (id?: number) => {
	return [`/categories/${id}`] as const;
};

export const getGetCategoryByIdInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getCategoryById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getCategoryById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetCategoryByIdQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategoryById>>> = ({
		signal,
	}) => getCategoryById(id, requestOptions, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getCategoryById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCategoryByIdInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getCategoryById>>
>;
export type GetCategoryByIdInfiniteQueryError = ErrorType<ApiErrorResponse>;

export function useGetCategoryByIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getCategoryById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getCategoryById>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getCategoryById>>,
					TError,
					Awaited<ReturnType<typeof getCategoryById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCategoryByIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getCategoryById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getCategoryById>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getCategoryById>>,
					TError,
					Awaited<ReturnType<typeof getCategoryById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCategoryByIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getCategoryById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getCategoryById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get category by ID
 */

export function useGetCategoryByIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getCategoryById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getCategoryById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetCategoryByIdInfiniteQueryOptions(id, options);

	const query = useInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetCategoryByIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getCategoryById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getCategoryById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetCategoryByIdQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategoryById>>> = ({
		signal,
	}) => getCategoryById(id, requestOptions, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getCategoryById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCategoryByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getCategoryById>>
>;
export type GetCategoryByIdQueryError = ErrorType<ApiErrorResponse>;

export function useGetCategoryById<
	TData = Awaited<ReturnType<typeof getCategoryById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getCategoryById>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getCategoryById>>,
					TError,
					Awaited<ReturnType<typeof getCategoryById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCategoryById<
	TData = Awaited<ReturnType<typeof getCategoryById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getCategoryById>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getCategoryById>>,
					TError,
					Awaited<ReturnType<typeof getCategoryById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCategoryById<
	TData = Awaited<ReturnType<typeof getCategoryById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getCategoryById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get category by ID
 */

export function useGetCategoryById<
	TData = Awaited<ReturnType<typeof getCategoryById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getCategoryById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetCategoryByIdQueryOptions(id, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetCategoryByIdSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof getCategoryById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getCategoryById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetCategoryByIdQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategoryById>>> = ({
		signal,
	}) => getCategoryById(id, requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof getCategoryById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCategoryByIdSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof getCategoryById>>
>;
export type GetCategoryByIdSuspenseQueryError = ErrorType<ApiErrorResponse>;

export function useGetCategoryByIdSuspense<
	TData = Awaited<ReturnType<typeof getCategoryById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getCategoryById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCategoryByIdSuspense<
	TData = Awaited<ReturnType<typeof getCategoryById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getCategoryById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCategoryByIdSuspense<
	TData = Awaited<ReturnType<typeof getCategoryById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getCategoryById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get category by ID
 */

export function useGetCategoryByIdSuspense<
	TData = Awaited<ReturnType<typeof getCategoryById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getCategoryById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetCategoryByIdSuspenseQueryOptions(id, options);

	const query = useSuspenseQuery(
		queryOptions,
		queryClient,
	) as UseSuspenseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetCategoryByIdSuspenseInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getCategoryById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getCategoryById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetCategoryByIdQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategoryById>>> = ({
		signal,
	}) => getCategoryById(id, requestOptions, signal);

	return {
		queryKey,
		queryFn,
		...queryOptions,
	} as UseSuspenseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getCategoryById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCategoryByIdSuspenseInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getCategoryById>>
>;
export type GetCategoryByIdSuspenseInfiniteQueryError =
	ErrorType<ApiErrorResponse>;

export function useGetCategoryByIdSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getCategoryById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options: {
		query: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getCategoryById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCategoryByIdSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getCategoryById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getCategoryById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCategoryByIdSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getCategoryById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getCategoryById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get category by ID
 */

export function useGetCategoryByIdSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getCategoryById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getCategoryById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetCategoryByIdSuspenseInfiniteQueryOptions(
		id,
		options,
	);

	const query = useSuspenseInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseSuspenseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Updates a vehicle category. Restricted to admins.
 * @summary Update a category (Admin only)
 */
export const updateCategory = (
	id: number,
	categoryCreate: BodyType<CategoryCreate>,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<CategoryResponse>(
		{
			url: `/categories/${id}`,
			method: "PUT",
			headers: { "Content-Type": "application/json" },
			data: categoryCreate,
		},
		options,
	);
};

export const getUpdateCategoryMutationOptions = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateCategory>>,
		TError,
		{ id: number; data: BodyType<CategoryCreate> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateCategory>>,
	TError,
	{ id: number; data: BodyType<CategoryCreate> },
	TContext
> => {
	const mutationKey = ["updateCategory"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateCategory>>,
		{ id: number; data: BodyType<CategoryCreate> }
	> = (props) => {
		const { id, data } = props ?? {};

		return updateCategory(id, data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateCategoryMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateCategory>>
>;
export type UpdateCategoryMutationBody = BodyType<CategoryCreate>;
export type UpdateCategoryMutationError = ErrorType<
	ApiErrorResponse | ApiErrorResponse | ApiErrorResponse
>;

/**
 * @summary Update a category (Admin only)
 */
export const useUpdateCategory = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updateCategory>>,
			TError,
			{ id: number; data: BodyType<CategoryCreate> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof updateCategory>>,
	TError,
	{ id: number; data: BodyType<CategoryCreate> },
	TContext
> => {
	const mutationOptions = getUpdateCategoryMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Deletes a vehicle category. Restricted to admins.
 * @summary Delete a category (Admin only)
 */
export const deleteCategory = (
	id: number,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<BaseResponse>(
		{ url: `/categories/${id}`, method: "DELETE" },
		options,
	);
};

export const getDeleteCategoryMutationOptions = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteCategory>>,
		TError,
		{ id: number },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteCategory>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationKey = ["deleteCategory"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteCategory>>,
		{ id: number }
	> = (props) => {
		const { id } = props ?? {};

		return deleteCategory(id, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteCategoryMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteCategory>>
>;

export type DeleteCategoryMutationError = ErrorType<
	ApiErrorResponse | ApiErrorResponse
>;

/**
 * @summary Delete a category (Admin only)
 */
export const useDeleteCategory = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteCategory>>,
			TError,
			{ id: number },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteCategory>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationOptions = getDeleteCategoryMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
