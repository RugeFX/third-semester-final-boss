/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Parking Management API
 * API for managing users, parking levels, vehicles, and transactions for a parking facility.
This documentation provides a base for all the resources defined in the database schema.

 * OpenAPI spec version: 1.0.0
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseInfiniteQueryResult,
	DefinedUseQueryResult,
	InfiniteData,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseInfiniteQueryOptions,
	UseInfiniteQueryResult,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseInfiniteQueryOptions,
	UseSuspenseInfiniteQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";
import {
	useInfiniteQuery,
	useMutation,
	useQuery,
	useSuspenseInfiniteQuery,
	useSuspenseQuery,
} from "@tanstack/react-query";

import type {
	ApiErrorResponse,
	MembershipPlanArrayResponse,
	MembershipPlanCreate,
	MembershipPlanResponse,
} from ".././models";
import type { BodyType, ErrorType } from ".././mutator/custom-instance";
import { customInstance } from ".././mutator/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Retrieves a list of all available membership plans.
 * @summary List all membership plans
 */
export const listMembershipPlans = (
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<MembershipPlanArrayResponse>(
		{ url: `/membership-plans`, method: "GET", signal },
		options,
	);
};

export const getListMembershipPlansQueryKey = () => {
	return [`/membership-plans`] as const;
};

export const getListMembershipPlansInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof listMembershipPlans>>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseInfiniteQueryOptions<
			Awaited<ReturnType<typeof listMembershipPlans>>,
			TError,
			TData
		>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListMembershipPlansQueryKey();

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof listMembershipPlans>>
	> = ({ signal }) => listMembershipPlans(requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof listMembershipPlans>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListMembershipPlansInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof listMembershipPlans>>
>;
export type ListMembershipPlansInfiniteQueryError = ErrorType<unknown>;

export function useListMembershipPlansInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listMembershipPlans>>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listMembershipPlans>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof listMembershipPlans>>,
					TError,
					Awaited<ReturnType<typeof listMembershipPlans>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListMembershipPlansInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listMembershipPlans>>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listMembershipPlans>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof listMembershipPlans>>,
					TError,
					Awaited<ReturnType<typeof listMembershipPlans>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListMembershipPlansInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listMembershipPlans>>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listMembershipPlans>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List all membership plans
 */

export function useListMembershipPlansInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listMembershipPlans>>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listMembershipPlans>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListMembershipPlansInfiniteQueryOptions(options);

	const query = useInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getListMembershipPlansQueryOptions = <
	TData = Awaited<ReturnType<typeof listMembershipPlans>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<
			Awaited<ReturnType<typeof listMembershipPlans>>,
			TError,
			TData
		>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListMembershipPlansQueryKey();

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof listMembershipPlans>>
	> = ({ signal }) => listMembershipPlans(requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof listMembershipPlans>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListMembershipPlansQueryResult = NonNullable<
	Awaited<ReturnType<typeof listMembershipPlans>>
>;
export type ListMembershipPlansQueryError = ErrorType<unknown>;

export function useListMembershipPlans<
	TData = Awaited<ReturnType<typeof listMembershipPlans>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listMembershipPlans>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof listMembershipPlans>>,
					TError,
					Awaited<ReturnType<typeof listMembershipPlans>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListMembershipPlans<
	TData = Awaited<ReturnType<typeof listMembershipPlans>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listMembershipPlans>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof listMembershipPlans>>,
					TError,
					Awaited<ReturnType<typeof listMembershipPlans>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListMembershipPlans<
	TData = Awaited<ReturnType<typeof listMembershipPlans>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listMembershipPlans>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List all membership plans
 */

export function useListMembershipPlans<
	TData = Awaited<ReturnType<typeof listMembershipPlans>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listMembershipPlans>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListMembershipPlansQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getListMembershipPlansSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof listMembershipPlans>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseSuspenseQueryOptions<
			Awaited<ReturnType<typeof listMembershipPlans>>,
			TError,
			TData
		>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListMembershipPlansQueryKey();

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof listMembershipPlans>>
	> = ({ signal }) => listMembershipPlans(requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof listMembershipPlans>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListMembershipPlansSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof listMembershipPlans>>
>;
export type ListMembershipPlansSuspenseQueryError = ErrorType<unknown>;

export function useListMembershipPlansSuspense<
	TData = Awaited<ReturnType<typeof listMembershipPlans>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof listMembershipPlans>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListMembershipPlansSuspense<
	TData = Awaited<ReturnType<typeof listMembershipPlans>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof listMembershipPlans>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListMembershipPlansSuspense<
	TData = Awaited<ReturnType<typeof listMembershipPlans>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof listMembershipPlans>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List all membership plans
 */

export function useListMembershipPlansSuspense<
	TData = Awaited<ReturnType<typeof listMembershipPlans>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof listMembershipPlans>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListMembershipPlansSuspenseQueryOptions(options);

	const query = useSuspenseQuery(
		queryOptions,
		queryClient,
	) as UseSuspenseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getListMembershipPlansSuspenseInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof listMembershipPlans>>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseSuspenseInfiniteQueryOptions<
			Awaited<ReturnType<typeof listMembershipPlans>>,
			TError,
			TData
		>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListMembershipPlansQueryKey();

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof listMembershipPlans>>
	> = ({ signal }) => listMembershipPlans(requestOptions, signal);

	return {
		queryKey,
		queryFn,
		...queryOptions,
	} as UseSuspenseInfiniteQueryOptions<
		Awaited<ReturnType<typeof listMembershipPlans>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListMembershipPlansSuspenseInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof listMembershipPlans>>
>;
export type ListMembershipPlansSuspenseInfiniteQueryError = ErrorType<unknown>;

export function useListMembershipPlansSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listMembershipPlans>>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listMembershipPlans>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListMembershipPlansSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listMembershipPlans>>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listMembershipPlans>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListMembershipPlansSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listMembershipPlans>>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listMembershipPlans>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List all membership plans
 */

export function useListMembershipPlansSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listMembershipPlans>>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listMembershipPlans>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions =
		getListMembershipPlansSuspenseInfiniteQueryOptions(options);

	const query = useSuspenseInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseSuspenseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Creates a new membership plan. Restricted to admins.
 * @summary Create a membership plan (Admin only)
 */
export const createMembershipPlan = (
	membershipPlanCreate: BodyType<MembershipPlanCreate>,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<MembershipPlanResponse>(
		{
			url: `/membership-plans`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: membershipPlanCreate,
			signal,
		},
		options,
	);
};

export const getCreateMembershipPlanMutationOptions = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createMembershipPlan>>,
		TError,
		{ data: BodyType<MembershipPlanCreate> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createMembershipPlan>>,
	TError,
	{ data: BodyType<MembershipPlanCreate> },
	TContext
> => {
	const mutationKey = ["createMembershipPlan"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createMembershipPlan>>,
		{ data: BodyType<MembershipPlanCreate> }
	> = (props) => {
		const { data } = props ?? {};

		return createMembershipPlan(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateMembershipPlanMutationResult = NonNullable<
	Awaited<ReturnType<typeof createMembershipPlan>>
>;
export type CreateMembershipPlanMutationBody = BodyType<MembershipPlanCreate>;
export type CreateMembershipPlanMutationError = ErrorType<
	ApiErrorResponse | ApiErrorResponse
>;

/**
 * @summary Create a membership plan (Admin only)
 */
export const useCreateMembershipPlan = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createMembershipPlan>>,
			TError,
			{ data: BodyType<MembershipPlanCreate> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof createMembershipPlan>>,
	TError,
	{ data: BodyType<MembershipPlanCreate> },
	TContext
> => {
	const mutationOptions = getCreateMembershipPlanMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Retrieves details for a specific membership plan.
 * @summary Get membership plan by ID
 */
export const getMembershipPlanById = (
	id: number,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<MembershipPlanResponse>(
		{ url: `/membership-plans/${id}`, method: "GET", signal },
		options,
	);
};

export const getGetMembershipPlanByIdQueryKey = (id?: number) => {
	return [`/membership-plans/${id}`] as const;
};

export const getGetMembershipPlanByIdInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getMembershipPlanById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getMembershipPlanById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetMembershipPlanByIdQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getMembershipPlanById>>
	> = ({ signal }) => getMembershipPlanById(id, requestOptions, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getMembershipPlanById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMembershipPlanByIdInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getMembershipPlanById>>
>;
export type GetMembershipPlanByIdInfiniteQueryError =
	ErrorType<ApiErrorResponse>;

export function useGetMembershipPlanByIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getMembershipPlanById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getMembershipPlanById>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getMembershipPlanById>>,
					TError,
					Awaited<ReturnType<typeof getMembershipPlanById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMembershipPlanByIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getMembershipPlanById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getMembershipPlanById>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getMembershipPlanById>>,
					TError,
					Awaited<ReturnType<typeof getMembershipPlanById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMembershipPlanByIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getMembershipPlanById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getMembershipPlanById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get membership plan by ID
 */

export function useGetMembershipPlanByIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getMembershipPlanById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getMembershipPlanById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetMembershipPlanByIdInfiniteQueryOptions(
		id,
		options,
	);

	const query = useInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetMembershipPlanByIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getMembershipPlanById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getMembershipPlanById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetMembershipPlanByIdQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getMembershipPlanById>>
	> = ({ signal }) => getMembershipPlanById(id, requestOptions, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getMembershipPlanById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMembershipPlanByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getMembershipPlanById>>
>;
export type GetMembershipPlanByIdQueryError = ErrorType<ApiErrorResponse>;

export function useGetMembershipPlanById<
	TData = Awaited<ReturnType<typeof getMembershipPlanById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getMembershipPlanById>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getMembershipPlanById>>,
					TError,
					Awaited<ReturnType<typeof getMembershipPlanById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMembershipPlanById<
	TData = Awaited<ReturnType<typeof getMembershipPlanById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getMembershipPlanById>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getMembershipPlanById>>,
					TError,
					Awaited<ReturnType<typeof getMembershipPlanById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMembershipPlanById<
	TData = Awaited<ReturnType<typeof getMembershipPlanById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getMembershipPlanById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get membership plan by ID
 */

export function useGetMembershipPlanById<
	TData = Awaited<ReturnType<typeof getMembershipPlanById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getMembershipPlanById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetMembershipPlanByIdQueryOptions(id, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetMembershipPlanByIdSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof getMembershipPlanById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getMembershipPlanById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetMembershipPlanByIdQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getMembershipPlanById>>
	> = ({ signal }) => getMembershipPlanById(id, requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof getMembershipPlanById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMembershipPlanByIdSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof getMembershipPlanById>>
>;
export type GetMembershipPlanByIdSuspenseQueryError =
	ErrorType<ApiErrorResponse>;

export function useGetMembershipPlanByIdSuspense<
	TData = Awaited<ReturnType<typeof getMembershipPlanById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getMembershipPlanById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMembershipPlanByIdSuspense<
	TData = Awaited<ReturnType<typeof getMembershipPlanById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getMembershipPlanById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMembershipPlanByIdSuspense<
	TData = Awaited<ReturnType<typeof getMembershipPlanById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getMembershipPlanById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get membership plan by ID
 */

export function useGetMembershipPlanByIdSuspense<
	TData = Awaited<ReturnType<typeof getMembershipPlanById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getMembershipPlanById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetMembershipPlanByIdSuspenseQueryOptions(
		id,
		options,
	);

	const query = useSuspenseQuery(
		queryOptions,
		queryClient,
	) as UseSuspenseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetMembershipPlanByIdSuspenseInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getMembershipPlanById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getMembershipPlanById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetMembershipPlanByIdQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getMembershipPlanById>>
	> = ({ signal }) => getMembershipPlanById(id, requestOptions, signal);

	return {
		queryKey,
		queryFn,
		...queryOptions,
	} as UseSuspenseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getMembershipPlanById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMembershipPlanByIdSuspenseInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getMembershipPlanById>>
>;
export type GetMembershipPlanByIdSuspenseInfiniteQueryError =
	ErrorType<ApiErrorResponse>;

export function useGetMembershipPlanByIdSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getMembershipPlanById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options: {
		query: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getMembershipPlanById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMembershipPlanByIdSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getMembershipPlanById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getMembershipPlanById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMembershipPlanByIdSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getMembershipPlanById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getMembershipPlanById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get membership plan by ID
 */

export function useGetMembershipPlanByIdSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getMembershipPlanById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getMembershipPlanById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetMembershipPlanByIdSuspenseInfiniteQueryOptions(
		id,
		options,
	);

	const query = useSuspenseInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseSuspenseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Updates a membership plan. Restricted to admins.
 * @summary Update a membership plan (Admin only)
 */
export const updateMembershipPlan = (
	id: number,
	membershipPlanCreate: BodyType<MembershipPlanCreate>,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<MembershipPlanResponse>(
		{
			url: `/membership-plans/${id}`,
			method: "PUT",
			headers: { "Content-Type": "application/json" },
			data: membershipPlanCreate,
		},
		options,
	);
};

export const getUpdateMembershipPlanMutationOptions = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateMembershipPlan>>,
		TError,
		{ id: number; data: BodyType<MembershipPlanCreate> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateMembershipPlan>>,
	TError,
	{ id: number; data: BodyType<MembershipPlanCreate> },
	TContext
> => {
	const mutationKey = ["updateMembershipPlan"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateMembershipPlan>>,
		{ id: number; data: BodyType<MembershipPlanCreate> }
	> = (props) => {
		const { id, data } = props ?? {};

		return updateMembershipPlan(id, data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateMembershipPlanMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateMembershipPlan>>
>;
export type UpdateMembershipPlanMutationBody = BodyType<MembershipPlanCreate>;
export type UpdateMembershipPlanMutationError = ErrorType<
	ApiErrorResponse | ApiErrorResponse | ApiErrorResponse
>;

/**
 * @summary Update a membership plan (Admin only)
 */
export const useUpdateMembershipPlan = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updateMembershipPlan>>,
			TError,
			{ id: number; data: BodyType<MembershipPlanCreate> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof updateMembershipPlan>>,
	TError,
	{ id: number; data: BodyType<MembershipPlanCreate> },
	TContext
> => {
	const mutationOptions = getUpdateMembershipPlanMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Deletes a membership plan. Restricted to admins.
 * @summary Delete a membership plan (Admin only)
 */
export const deleteMembershipPlan = (
	id: number,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<MembershipPlanResponse>(
		{ url: `/membership-plans/${id}`, method: "DELETE" },
		options,
	);
};

export const getDeleteMembershipPlanMutationOptions = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteMembershipPlan>>,
		TError,
		{ id: number },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteMembershipPlan>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationKey = ["deleteMembershipPlan"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteMembershipPlan>>,
		{ id: number }
	> = (props) => {
		const { id } = props ?? {};

		return deleteMembershipPlan(id, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteMembershipPlanMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteMembershipPlan>>
>;

export type DeleteMembershipPlanMutationError = ErrorType<
	ApiErrorResponse | ApiErrorResponse
>;

/**
 * @summary Delete a membership plan (Admin only)
 */
export const useDeleteMembershipPlan = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteMembershipPlan>>,
			TError,
			{ id: number },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteMembershipPlan>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationOptions = getDeleteMembershipPlanMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
