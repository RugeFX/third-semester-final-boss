/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Parking Management API
 * API for managing users, parking levels, vehicles, and transactions for a parking facility.
This documentation provides a base for all the resources defined in the database schema.

 * OpenAPI spec version: 1.0.0
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";

import type {
	ApiErrorResponse,
	MemberArrayResponse,
	MemberCreate,
	MemberResponse,
	MembershipRenewal,
	SuccessResponse,
	TransactionArrayResponse,
	UpdateMemberBody,
} from ".././models";
import type { BodyType, ErrorType } from ".././mutator/custom-instance";
import { customInstance } from ".././mutator/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Retrieves a list of all member records. Restricted to admins.
 * @summary List all members (Admin only)
 */
export const listMembers = (
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<MemberArrayResponse>(
		{ url: `/members`, method: "GET", signal },
		options,
	);
};

export const getListMembersQueryKey = () => {
	return [`/members`] as const;
};

export const getListMembersQueryOptions = <
	TData = Awaited<ReturnType<typeof listMembers>>,
	TError = ErrorType<ApiErrorResponse>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof listMembers>>, TError, TData>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListMembersQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof listMembers>>> = ({
		signal,
	}) => listMembers(requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof listMembers>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListMembersQueryResult = NonNullable<
	Awaited<ReturnType<typeof listMembers>>
>;
export type ListMembersQueryError = ErrorType<ApiErrorResponse>;

export function useListMembers<
	TData = Awaited<ReturnType<typeof listMembers>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listMembers>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof listMembers>>,
					TError,
					Awaited<ReturnType<typeof listMembers>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListMembers<
	TData = Awaited<ReturnType<typeof listMembers>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listMembers>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof listMembers>>,
					TError,
					Awaited<ReturnType<typeof listMembers>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListMembers<
	TData = Awaited<ReturnType<typeof listMembers>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listMembers>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List all members (Admin only)
 */

export function useListMembers<
	TData = Awaited<ReturnType<typeof listMembers>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listMembers>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListMembersQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Creates a new member record for an existing user. Restricted to admins.
 * @summary Create a member record (Admin only)
 */
export const createMember = (
	memberCreate: BodyType<MemberCreate>,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<MemberResponse>(
		{
			url: `/members`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: memberCreate,
			signal,
		},
		options,
	);
};

export const getCreateMemberMutationOptions = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createMember>>,
		TError,
		{ data: BodyType<MemberCreate> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createMember>>,
	TError,
	{ data: BodyType<MemberCreate> },
	TContext
> => {
	const mutationKey = ["createMember"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createMember>>,
		{ data: BodyType<MemberCreate> }
	> = (props) => {
		const { data } = props ?? {};

		return createMember(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateMemberMutationResult = NonNullable<
	Awaited<ReturnType<typeof createMember>>
>;
export type CreateMemberMutationBody = BodyType<MemberCreate>;
export type CreateMemberMutationError = ErrorType<
	ApiErrorResponse | ApiErrorResponse
>;

/**
 * @summary Create a member record (Admin only)
 */
export const useCreateMember = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createMember>>,
			TError,
			{ data: BodyType<MemberCreate> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof createMember>>,
	TError,
	{ data: BodyType<MemberCreate> },
	TContext
> => {
	const mutationOptions = getCreateMemberMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Retrieves a specific member record by ID. Restricted to admins.
 * @summary Get member by ID (Admin only)
 */
export const getMemberById = (
	id: number,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<MemberResponse>(
		{ url: `/members/${id}`, method: "GET", signal },
		options,
	);
};

export const getGetMemberByIdQueryKey = (id?: number) => {
	return [`/members/${id}`] as const;
};

export const getGetMemberByIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getMemberById>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getMemberById>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetMemberByIdQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getMemberById>>> = ({
		signal,
	}) => getMemberById(id, requestOptions, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getMemberById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMemberByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getMemberById>>
>;
export type GetMemberByIdQueryError = ErrorType<
	ApiErrorResponse | ApiErrorResponse
>;

export function useGetMemberById<
	TData = Awaited<ReturnType<typeof getMemberById>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getMemberById>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getMemberById>>,
					TError,
					Awaited<ReturnType<typeof getMemberById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMemberById<
	TData = Awaited<ReturnType<typeof getMemberById>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getMemberById>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getMemberById>>,
					TError,
					Awaited<ReturnType<typeof getMemberById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMemberById<
	TData = Awaited<ReturnType<typeof getMemberById>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getMemberById>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get member by ID (Admin only)
 */

export function useGetMemberById<
	TData = Awaited<ReturnType<typeof getMemberById>>,
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getMemberById>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetMemberByIdQueryOptions(id, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Updates a member record. Restricted to admins.
 * @summary Update a member (Admin only)
 */
export const updateMember = (
	id: number,
	updateMemberBody: BodyType<UpdateMemberBody>,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<MemberResponse>(
		{
			url: `/members/${id}`,
			method: "PUT",
			headers: { "Content-Type": "application/json" },
			data: updateMemberBody,
		},
		options,
	);
};

export const getUpdateMemberMutationOptions = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateMember>>,
		TError,
		{ id: number; data: BodyType<UpdateMemberBody> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateMember>>,
	TError,
	{ id: number; data: BodyType<UpdateMemberBody> },
	TContext
> => {
	const mutationKey = ["updateMember"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateMember>>,
		{ id: number; data: BodyType<UpdateMemberBody> }
	> = (props) => {
		const { id, data } = props ?? {};

		return updateMember(id, data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateMemberMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateMember>>
>;
export type UpdateMemberMutationBody = BodyType<UpdateMemberBody>;
export type UpdateMemberMutationError = ErrorType<
	ApiErrorResponse | ApiErrorResponse | ApiErrorResponse
>;

/**
 * @summary Update a member (Admin only)
 */
export const useUpdateMember = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updateMember>>,
			TError,
			{ id: number; data: BodyType<UpdateMemberBody> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof updateMember>>,
	TError,
	{ id: number; data: BodyType<UpdateMemberBody> },
	TContext
> => {
	const mutationOptions = getUpdateMemberMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Deletes a member record. Restricted to admins.
 * @summary Delete a member record (Admin only)
 */
export const deleteMember = (
	id: number,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<SuccessResponse>(
		{ url: `/members/${id}`, method: "DELETE" },
		options,
	);
};

export const getDeleteMemberMutationOptions = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteMember>>,
		TError,
		{ id: number },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteMember>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationKey = ["deleteMember"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteMember>>,
		{ id: number }
	> = (props) => {
		const { id } = props ?? {};

		return deleteMember(id, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteMemberMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteMember>>
>;

export type DeleteMemberMutationError = ErrorType<
	ApiErrorResponse | ApiErrorResponse
>;

/**
 * @summary Delete a member record (Admin only)
 */
export const useDeleteMember = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteMember>>,
			TError,
			{ id: number },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteMember>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationOptions = getDeleteMemberMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Allows the currently authenticated member to extend their membership subscription.
 * @summary Renew a membership
 */
export const renewCurrentMember = (
	membershipRenewal: BodyType<MembershipRenewal>,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<MemberResponse>(
		{
			url: `/members/me/renew`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: membershipRenewal,
			signal,
		},
		options,
	);
};

export const getRenewCurrentMemberMutationOptions = <
	TError = ErrorType<ApiErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof renewCurrentMember>>,
		TError,
		{ data: BodyType<MembershipRenewal> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof renewCurrentMember>>,
	TError,
	{ data: BodyType<MembershipRenewal> },
	TContext
> => {
	const mutationKey = ["renewCurrentMember"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof renewCurrentMember>>,
		{ data: BodyType<MembershipRenewal> }
	> = (props) => {
		const { data } = props ?? {};

		return renewCurrentMember(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type RenewCurrentMemberMutationResult = NonNullable<
	Awaited<ReturnType<typeof renewCurrentMember>>
>;
export type RenewCurrentMemberMutationBody = BodyType<MembershipRenewal>;
export type RenewCurrentMemberMutationError = ErrorType<ApiErrorResponse>;

/**
 * @summary Renew a membership
 */
export const useRenewCurrentMember = <
	TError = ErrorType<ApiErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof renewCurrentMember>>,
			TError,
			{ data: BodyType<MembershipRenewal> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof renewCurrentMember>>,
	TError,
	{ data: BodyType<MembershipRenewal> },
	TContext
> => {
	const mutationOptions = getRenewCurrentMemberMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Fetches a list of all parking transactions for the authenticated member.
 * @summary Get member's transaction history
 */
export const getCurrentMemberTransactions = (
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<TransactionArrayResponse>(
		{ url: `/members/me/transactions`, method: "GET", signal },
		options,
	);
};

export const getGetCurrentMemberTransactionsQueryKey = () => {
	return [`/members/me/transactions`] as const;
};

export const getGetCurrentMemberTransactionsQueryOptions = <
	TData = Awaited<ReturnType<typeof getCurrentMemberTransactions>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<
			Awaited<ReturnType<typeof getCurrentMemberTransactions>>,
			TError,
			TData
		>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetCurrentMemberTransactionsQueryKey();

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getCurrentMemberTransactions>>
	> = ({ signal }) => getCurrentMemberTransactions(requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getCurrentMemberTransactions>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCurrentMemberTransactionsQueryResult = NonNullable<
	Awaited<ReturnType<typeof getCurrentMemberTransactions>>
>;
export type GetCurrentMemberTransactionsQueryError = ErrorType<unknown>;

export function useGetCurrentMemberTransactions<
	TData = Awaited<ReturnType<typeof getCurrentMemberTransactions>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getCurrentMemberTransactions>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getCurrentMemberTransactions>>,
					TError,
					Awaited<ReturnType<typeof getCurrentMemberTransactions>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCurrentMemberTransactions<
	TData = Awaited<ReturnType<typeof getCurrentMemberTransactions>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getCurrentMemberTransactions>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getCurrentMemberTransactions>>,
					TError,
					Awaited<ReturnType<typeof getCurrentMemberTransactions>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCurrentMemberTransactions<
	TData = Awaited<ReturnType<typeof getCurrentMemberTransactions>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getCurrentMemberTransactions>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get member's transaction history
 */

export function useGetCurrentMemberTransactions<
	TData = Awaited<ReturnType<typeof getCurrentMemberTransactions>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getCurrentMemberTransactions>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetCurrentMemberTransactionsQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
