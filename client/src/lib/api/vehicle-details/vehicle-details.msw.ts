/**
 * Generated by orval v7.13.0 🍺
 * Do not edit manually.
 * Parking Management API
 * API for managing users, parking levels, vehicles, and transactions for a parking facility.
This documentation provides a base for all the resources defined in the database schema.

 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import type { RequestHandlerOptions } from "msw";
import { delay, HttpResponse, http } from "msw";

import type {
	BaseResponse,
	VehicleDetailArrayResponse,
	VehicleDetailResponse,
} from ".././models";

export const getGetVehicleDetailsResponseMock =
	(): VehicleDetailArrayResponse => ({
		...{
			success: faker.datatype.boolean(),
			message: faker.string.alpha({ length: { min: 10, max: 20 } }),
		},
		...{
			data: Array.from(
				{ length: faker.number.int({ min: 1, max: 10 }) },
				(_, i) => i + 1,
			).map(() => ({
				id: faker.number.int({ min: undefined, max: undefined }),
				plateNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
				categoryId: faker.number.int({ min: undefined, max: undefined }),
			})),
		},
	});

export const getPostVehicleDetailsResponseMock = (): VehicleDetailResponse => ({
	...{
		success: faker.datatype.boolean(),
		message: faker.string.alpha({ length: { min: 10, max: 20 } }),
	},
	...{
		data: {
			id: faker.number.int({ min: undefined, max: undefined }),
			plateNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
			categoryId: faker.number.int({ min: undefined, max: undefined }),
		},
	},
});

export const getGetVehicleDetailsIdResponseMock =
	(): VehicleDetailResponse => ({
		...{
			success: faker.datatype.boolean(),
			message: faker.string.alpha({ length: { min: 10, max: 20 } }),
		},
		...{
			data: {
				id: faker.number.int({ min: undefined, max: undefined }),
				plateNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
				categoryId: faker.number.int({ min: undefined, max: undefined }),
			},
		},
	});

export const getPutVehicleDetailsIdResponseMock =
	(): VehicleDetailResponse => ({
		...{
			success: faker.datatype.boolean(),
			message: faker.string.alpha({ length: { min: 10, max: 20 } }),
		},
		...{
			data: {
				id: faker.number.int({ min: undefined, max: undefined }),
				plateNumber: faker.string.alpha({ length: { min: 10, max: 20 } }),
				categoryId: faker.number.int({ min: undefined, max: undefined }),
			},
		},
	});

export const getDeleteVehicleDetailsIdResponseMock = (
	overrideResponse: Partial<BaseResponse> = {},
): BaseResponse => ({
	success: faker.datatype.boolean(),
	message: faker.string.alpha({ length: { min: 10, max: 20 } }),
	...overrideResponse,
});

export const getGetVehicleDetailsMockHandler = (
	overrideResponse?:
		| VehicleDetailArrayResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<VehicleDetailArrayResponse> | VehicleDetailArrayResponse),
	options?: RequestHandlerOptions,
) => {
	return http.get(
		"*/vehicle-details",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getGetVehicleDetailsResponseMock(),
				),
				{ status: 200, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};

export const getPostVehicleDetailsMockHandler = (
	overrideResponse?:
		| VehicleDetailResponse
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<VehicleDetailResponse> | VehicleDetailResponse),
	options?: RequestHandlerOptions,
) => {
	return http.post(
		"*/vehicle-details",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getPostVehicleDetailsResponseMock(),
				),
				{ status: 201, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};

export const getGetVehicleDetailsIdMockHandler = (
	overrideResponse?:
		| VehicleDetailResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<VehicleDetailResponse> | VehicleDetailResponse),
	options?: RequestHandlerOptions,
) => {
	return http.get(
		"*/vehicle-details/:id",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getGetVehicleDetailsIdResponseMock(),
				),
				{ status: 200, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};

export const getPutVehicleDetailsIdMockHandler = (
	overrideResponse?:
		| VehicleDetailResponse
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<VehicleDetailResponse> | VehicleDetailResponse),
	options?: RequestHandlerOptions,
) => {
	return http.put(
		"*/vehicle-details/:id",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getPutVehicleDetailsIdResponseMock(),
				),
				{ status: 200, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};

export const getDeleteVehicleDetailsIdMockHandler = (
	overrideResponse?:
		| BaseResponse
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<BaseResponse> | BaseResponse),
	options?: RequestHandlerOptions,
) => {
	return http.delete(
		"*/vehicle-details/:id",
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === "function"
							? await overrideResponse(info)
							: overrideResponse
						: getDeleteVehicleDetailsIdResponseMock(),
				),
				{ status: 200, headers: { "Content-Type": "application/json" } },
			);
		},
		options,
	);
};
export const getVehicleDetailsMock = () => [
	getGetVehicleDetailsMockHandler(),
	getPostVehicleDetailsMockHandler(),
	getGetVehicleDetailsIdMockHandler(),
	getPutVehicleDetailsIdMockHandler(),
	getDeleteVehicleDetailsIdMockHandler(),
];
