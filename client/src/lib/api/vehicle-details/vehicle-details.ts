/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Parking Management API
 * API for managing users, parking levels, vehicles, and transactions for a parking facility.
This documentation provides a base for all the resources defined in the database schema.

 * OpenAPI spec version: 1.0.0
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";

import type {
	ApiErrorResponse,
	BaseResponse,
	VehicleDetailArrayResponse,
	VehicleDetailCreate,
	VehicleDetailResponse,
	VehicleDetailUpdate,
} from ".././models";
import type { BodyType, ErrorType } from ".././mutator/custom-instance";
import { customInstance } from ".././mutator/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary List all vehicle details
 */
export const getVehicleDetails = (
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<VehicleDetailArrayResponse>(
		{ url: `/vehicle-details`, method: "GET", signal },
		options,
	);
};

export const getGetVehicleDetailsQueryKey = () => {
	return [`/vehicle-details`] as const;
};

export const getGetVehicleDetailsQueryOptions = <
	TData = Awaited<ReturnType<typeof getVehicleDetails>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<
			Awaited<ReturnType<typeof getVehicleDetails>>,
			TError,
			TData
		>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetVehicleDetailsQueryKey();

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getVehicleDetails>>
	> = ({ signal }) => getVehicleDetails(requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getVehicleDetails>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetVehicleDetailsQueryResult = NonNullable<
	Awaited<ReturnType<typeof getVehicleDetails>>
>;
export type GetVehicleDetailsQueryError = ErrorType<unknown>;

export function useGetVehicleDetails<
	TData = Awaited<ReturnType<typeof getVehicleDetails>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getVehicleDetails>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getVehicleDetails>>,
					TError,
					Awaited<ReturnType<typeof getVehicleDetails>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetVehicleDetails<
	TData = Awaited<ReturnType<typeof getVehicleDetails>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getVehicleDetails>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getVehicleDetails>>,
					TError,
					Awaited<ReturnType<typeof getVehicleDetails>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetVehicleDetails<
	TData = Awaited<ReturnType<typeof getVehicleDetails>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getVehicleDetails>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List all vehicle details
 */

export function useGetVehicleDetails<
	TData = Awaited<ReturnType<typeof getVehicleDetails>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getVehicleDetails>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetVehicleDetailsQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Create a new vehicle detail
 */
export const postVehicleDetails = (
	vehicleDetailCreate: BodyType<VehicleDetailCreate>,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<VehicleDetailResponse>(
		{
			url: `/vehicle-details`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: vehicleDetailCreate,
			signal,
		},
		options,
	);
};

export const getPostVehicleDetailsMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postVehicleDetails>>,
		TError,
		{ data: BodyType<VehicleDetailCreate> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof postVehicleDetails>>,
	TError,
	{ data: BodyType<VehicleDetailCreate> },
	TContext
> => {
	const mutationKey = ["postVehicleDetails"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof postVehicleDetails>>,
		{ data: BodyType<VehicleDetailCreate> }
	> = (props) => {
		const { data } = props ?? {};

		return postVehicleDetails(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type PostVehicleDetailsMutationResult = NonNullable<
	Awaited<ReturnType<typeof postVehicleDetails>>
>;
export type PostVehicleDetailsMutationBody = BodyType<VehicleDetailCreate>;
export type PostVehicleDetailsMutationError = ErrorType<unknown>;

/**
 * @summary Create a new vehicle detail
 */
export const usePostVehicleDetails = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof postVehicleDetails>>,
			TError,
			{ data: BodyType<VehicleDetailCreate> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof postVehicleDetails>>,
	TError,
	{ data: BodyType<VehicleDetailCreate> },
	TContext
> => {
	const mutationOptions = getPostVehicleDetailsMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get vehicle detail by ID
 */
export const getVehicleDetailsId = (
	id: number,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<VehicleDetailResponse>(
		{ url: `/vehicle-details/${id}`, method: "GET", signal },
		options,
	);
};

export const getGetVehicleDetailsIdQueryKey = (id?: number) => {
	return [`/vehicle-details/${id}`] as const;
};

export const getGetVehicleDetailsIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getVehicleDetailsId>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getVehicleDetailsId>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetVehicleDetailsIdQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getVehicleDetailsId>>
	> = ({ signal }) => getVehicleDetailsId(id, requestOptions, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getVehicleDetailsId>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetVehicleDetailsIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getVehicleDetailsId>>
>;
export type GetVehicleDetailsIdQueryError = ErrorType<ApiErrorResponse>;

export function useGetVehicleDetailsId<
	TData = Awaited<ReturnType<typeof getVehicleDetailsId>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getVehicleDetailsId>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getVehicleDetailsId>>,
					TError,
					Awaited<ReturnType<typeof getVehicleDetailsId>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetVehicleDetailsId<
	TData = Awaited<ReturnType<typeof getVehicleDetailsId>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getVehicleDetailsId>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getVehicleDetailsId>>,
					TError,
					Awaited<ReturnType<typeof getVehicleDetailsId>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetVehicleDetailsId<
	TData = Awaited<ReturnType<typeof getVehicleDetailsId>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getVehicleDetailsId>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get vehicle detail by ID
 */

export function useGetVehicleDetailsId<
	TData = Awaited<ReturnType<typeof getVehicleDetailsId>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getVehicleDetailsId>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetVehicleDetailsIdQueryOptions(id, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Update a vehicle detail
 */
export const putVehicleDetailsId = (
	id: number,
	vehicleDetailUpdate: BodyType<VehicleDetailUpdate>,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<VehicleDetailResponse>(
		{
			url: `/vehicle-details/${id}`,
			method: "PUT",
			headers: { "Content-Type": "application/json" },
			data: vehicleDetailUpdate,
		},
		options,
	);
};

export const getPutVehicleDetailsIdMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof putVehicleDetailsId>>,
		TError,
		{ id: number; data: BodyType<VehicleDetailUpdate> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof putVehicleDetailsId>>,
	TError,
	{ id: number; data: BodyType<VehicleDetailUpdate> },
	TContext
> => {
	const mutationKey = ["putVehicleDetailsId"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof putVehicleDetailsId>>,
		{ id: number; data: BodyType<VehicleDetailUpdate> }
	> = (props) => {
		const { id, data } = props ?? {};

		return putVehicleDetailsId(id, data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type PutVehicleDetailsIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof putVehicleDetailsId>>
>;
export type PutVehicleDetailsIdMutationBody = BodyType<VehicleDetailUpdate>;
export type PutVehicleDetailsIdMutationError = ErrorType<unknown>;

/**
 * @summary Update a vehicle detail
 */
export const usePutVehicleDetailsId = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof putVehicleDetailsId>>,
			TError,
			{ id: number; data: BodyType<VehicleDetailUpdate> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof putVehicleDetailsId>>,
	TError,
	{ id: number; data: BodyType<VehicleDetailUpdate> },
	TContext
> => {
	const mutationOptions = getPutVehicleDetailsIdMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete a vehicle detail
 */
export const deleteVehicleDetailsId = (
	id: number,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<BaseResponse>(
		{ url: `/vehicle-details/${id}`, method: "DELETE" },
		options,
	);
};

export const getDeleteVehicleDetailsIdMutationOptions = <
	TError = ErrorType<ApiErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteVehicleDetailsId>>,
		TError,
		{ id: number },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteVehicleDetailsId>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationKey = ["deleteVehicleDetailsId"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteVehicleDetailsId>>,
		{ id: number }
	> = (props) => {
		const { id } = props ?? {};

		return deleteVehicleDetailsId(id, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteVehicleDetailsIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteVehicleDetailsId>>
>;

export type DeleteVehicleDetailsIdMutationError = ErrorType<ApiErrorResponse>;

/**
 * @summary Delete a vehicle detail
 */
export const useDeleteVehicleDetailsId = <
	TError = ErrorType<ApiErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteVehicleDetailsId>>,
			TError,
			{ id: number },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteVehicleDetailsId>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationOptions = getDeleteVehicleDetailsIdMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
