/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Parking Management API
 * API for managing users, parking levels, vehicles, and transactions for a parking facility.
This documentation provides a base for all the resources defined in the database schema.

 * OpenAPI spec version: 1.0.0
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseInfiniteQueryResult,
	DefinedUseQueryResult,
	InfiniteData,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseInfiniteQueryOptions,
	UseInfiniteQueryResult,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseInfiniteQueryOptions,
	UseSuspenseInfiniteQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";
import {
	useInfiniteQuery,
	useMutation,
	useQuery,
	useSuspenseInfiniteQuery,
	useSuspenseQuery,
} from "@tanstack/react-query";

import type {
	ApiErrorResponse,
	ParkingLevelArrayResponse,
	ParkingLevelCreate,
	ParkingLevelResponse,
} from ".././models";
import type { BodyType, ErrorType } from ".././mutator/custom-instance";
import { customInstance } from ".././mutator/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Returns a list of all available parking levels in the facility.
 * @summary List all parking levels
 */
export const listParkingLevels = (
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<ParkingLevelArrayResponse>(
		{ url: `/parking-levels`, method: "GET", signal },
		options,
	);
};

export const getListParkingLevelsQueryKey = () => {
	return [`/parking-levels`] as const;
};

export const getListParkingLevelsInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof listParkingLevels>>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseInfiniteQueryOptions<
			Awaited<ReturnType<typeof listParkingLevels>>,
			TError,
			TData
		>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListParkingLevelsQueryKey();

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof listParkingLevels>>
	> = ({ signal }) => listParkingLevels(requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof listParkingLevels>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListParkingLevelsInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof listParkingLevels>>
>;
export type ListParkingLevelsInfiniteQueryError = ErrorType<unknown>;

export function useListParkingLevelsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listParkingLevels>>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listParkingLevels>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof listParkingLevels>>,
					TError,
					Awaited<ReturnType<typeof listParkingLevels>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListParkingLevelsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listParkingLevels>>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listParkingLevels>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof listParkingLevels>>,
					TError,
					Awaited<ReturnType<typeof listParkingLevels>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListParkingLevelsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listParkingLevels>>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listParkingLevels>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List all parking levels
 */

export function useListParkingLevelsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listParkingLevels>>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listParkingLevels>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListParkingLevelsInfiniteQueryOptions(options);

	const query = useInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getListParkingLevelsQueryOptions = <
	TData = Awaited<ReturnType<typeof listParkingLevels>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<
			Awaited<ReturnType<typeof listParkingLevels>>,
			TError,
			TData
		>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListParkingLevelsQueryKey();

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof listParkingLevels>>
	> = ({ signal }) => listParkingLevels(requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof listParkingLevels>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListParkingLevelsQueryResult = NonNullable<
	Awaited<ReturnType<typeof listParkingLevels>>
>;
export type ListParkingLevelsQueryError = ErrorType<unknown>;

export function useListParkingLevels<
	TData = Awaited<ReturnType<typeof listParkingLevels>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listParkingLevels>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof listParkingLevels>>,
					TError,
					Awaited<ReturnType<typeof listParkingLevels>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListParkingLevels<
	TData = Awaited<ReturnType<typeof listParkingLevels>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listParkingLevels>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof listParkingLevels>>,
					TError,
					Awaited<ReturnType<typeof listParkingLevels>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListParkingLevels<
	TData = Awaited<ReturnType<typeof listParkingLevels>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listParkingLevels>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List all parking levels
 */

export function useListParkingLevels<
	TData = Awaited<ReturnType<typeof listParkingLevels>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listParkingLevels>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListParkingLevelsQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getListParkingLevelsSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof listParkingLevels>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseSuspenseQueryOptions<
			Awaited<ReturnType<typeof listParkingLevels>>,
			TError,
			TData
		>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListParkingLevelsQueryKey();

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof listParkingLevels>>
	> = ({ signal }) => listParkingLevels(requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof listParkingLevels>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListParkingLevelsSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof listParkingLevels>>
>;
export type ListParkingLevelsSuspenseQueryError = ErrorType<unknown>;

export function useListParkingLevelsSuspense<
	TData = Awaited<ReturnType<typeof listParkingLevels>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof listParkingLevels>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListParkingLevelsSuspense<
	TData = Awaited<ReturnType<typeof listParkingLevels>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof listParkingLevels>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListParkingLevelsSuspense<
	TData = Awaited<ReturnType<typeof listParkingLevels>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof listParkingLevels>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List all parking levels
 */

export function useListParkingLevelsSuspense<
	TData = Awaited<ReturnType<typeof listParkingLevels>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof listParkingLevels>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListParkingLevelsSuspenseQueryOptions(options);

	const query = useSuspenseQuery(
		queryOptions,
		queryClient,
	) as UseSuspenseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getListParkingLevelsSuspenseInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof listParkingLevels>>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseSuspenseInfiniteQueryOptions<
			Awaited<ReturnType<typeof listParkingLevels>>,
			TError,
			TData
		>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListParkingLevelsQueryKey();

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof listParkingLevels>>
	> = ({ signal }) => listParkingLevels(requestOptions, signal);

	return {
		queryKey,
		queryFn,
		...queryOptions,
	} as UseSuspenseInfiniteQueryOptions<
		Awaited<ReturnType<typeof listParkingLevels>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListParkingLevelsSuspenseInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof listParkingLevels>>
>;
export type ListParkingLevelsSuspenseInfiniteQueryError = ErrorType<unknown>;

export function useListParkingLevelsSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listParkingLevels>>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listParkingLevels>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListParkingLevelsSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listParkingLevels>>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listParkingLevels>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListParkingLevelsSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listParkingLevels>>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listParkingLevels>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List all parking levels
 */

export function useListParkingLevelsSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof listParkingLevels>>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof listParkingLevels>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions =
		getListParkingLevelsSuspenseInfiniteQueryOptions(options);

	const query = useSuspenseInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseSuspenseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Creates a new parking level. Restricted to admins.
 * @summary Create a parking level (Admin only)
 */
export const createParkingLevel = (
	parkingLevelCreate: BodyType<ParkingLevelCreate>,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<ParkingLevelResponse>(
		{
			url: `/parking-levels`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: parkingLevelCreate,
			signal,
		},
		options,
	);
};

export const getCreateParkingLevelMutationOptions = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createParkingLevel>>,
		TError,
		{ data: BodyType<ParkingLevelCreate> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createParkingLevel>>,
	TError,
	{ data: BodyType<ParkingLevelCreate> },
	TContext
> => {
	const mutationKey = ["createParkingLevel"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createParkingLevel>>,
		{ data: BodyType<ParkingLevelCreate> }
	> = (props) => {
		const { data } = props ?? {};

		return createParkingLevel(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateParkingLevelMutationResult = NonNullable<
	Awaited<ReturnType<typeof createParkingLevel>>
>;
export type CreateParkingLevelMutationBody = BodyType<ParkingLevelCreate>;
export type CreateParkingLevelMutationError = ErrorType<
	ApiErrorResponse | ApiErrorResponse
>;

/**
 * @summary Create a parking level (Admin only)
 */
export const useCreateParkingLevel = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createParkingLevel>>,
			TError,
			{ data: BodyType<ParkingLevelCreate> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof createParkingLevel>>,
	TError,
	{ data: BodyType<ParkingLevelCreate> },
	TContext
> => {
	const mutationOptions = getCreateParkingLevelMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Retrieves details for a specific parking level.
 * @summary Get parking level by ID
 */
export const getParkingLevelById = (
	id: number,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<ParkingLevelResponse>(
		{ url: `/parking-levels/${id}`, method: "GET", signal },
		options,
	);
};

export const getGetParkingLevelByIdQueryKey = (id?: number) => {
	return [`/parking-levels/${id}`] as const;
};

export const getGetParkingLevelByIdInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getParkingLevelById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getParkingLevelById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetParkingLevelByIdQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getParkingLevelById>>
	> = ({ signal }) => getParkingLevelById(id, requestOptions, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getParkingLevelById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetParkingLevelByIdInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getParkingLevelById>>
>;
export type GetParkingLevelByIdInfiniteQueryError = ErrorType<ApiErrorResponse>;

export function useGetParkingLevelByIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getParkingLevelById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getParkingLevelById>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getParkingLevelById>>,
					TError,
					Awaited<ReturnType<typeof getParkingLevelById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetParkingLevelByIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getParkingLevelById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getParkingLevelById>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getParkingLevelById>>,
					TError,
					Awaited<ReturnType<typeof getParkingLevelById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetParkingLevelByIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getParkingLevelById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getParkingLevelById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get parking level by ID
 */

export function useGetParkingLevelByIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getParkingLevelById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getParkingLevelById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetParkingLevelByIdInfiniteQueryOptions(id, options);

	const query = useInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetParkingLevelByIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getParkingLevelById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getParkingLevelById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetParkingLevelByIdQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getParkingLevelById>>
	> = ({ signal }) => getParkingLevelById(id, requestOptions, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getParkingLevelById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetParkingLevelByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getParkingLevelById>>
>;
export type GetParkingLevelByIdQueryError = ErrorType<ApiErrorResponse>;

export function useGetParkingLevelById<
	TData = Awaited<ReturnType<typeof getParkingLevelById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getParkingLevelById>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getParkingLevelById>>,
					TError,
					Awaited<ReturnType<typeof getParkingLevelById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetParkingLevelById<
	TData = Awaited<ReturnType<typeof getParkingLevelById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getParkingLevelById>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getParkingLevelById>>,
					TError,
					Awaited<ReturnType<typeof getParkingLevelById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetParkingLevelById<
	TData = Awaited<ReturnType<typeof getParkingLevelById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getParkingLevelById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get parking level by ID
 */

export function useGetParkingLevelById<
	TData = Awaited<ReturnType<typeof getParkingLevelById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getParkingLevelById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetParkingLevelByIdQueryOptions(id, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetParkingLevelByIdSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof getParkingLevelById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getParkingLevelById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetParkingLevelByIdQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getParkingLevelById>>
	> = ({ signal }) => getParkingLevelById(id, requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof getParkingLevelById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetParkingLevelByIdSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof getParkingLevelById>>
>;
export type GetParkingLevelByIdSuspenseQueryError = ErrorType<ApiErrorResponse>;

export function useGetParkingLevelByIdSuspense<
	TData = Awaited<ReturnType<typeof getParkingLevelById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options: {
		query: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getParkingLevelById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetParkingLevelByIdSuspense<
	TData = Awaited<ReturnType<typeof getParkingLevelById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getParkingLevelById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetParkingLevelByIdSuspense<
	TData = Awaited<ReturnType<typeof getParkingLevelById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getParkingLevelById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get parking level by ID
 */

export function useGetParkingLevelByIdSuspense<
	TData = Awaited<ReturnType<typeof getParkingLevelById>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseQueryOptions<
				Awaited<ReturnType<typeof getParkingLevelById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetParkingLevelByIdSuspenseQueryOptions(id, options);

	const query = useSuspenseQuery(
		queryOptions,
		queryClient,
	) as UseSuspenseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetParkingLevelByIdSuspenseInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getParkingLevelById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getParkingLevelById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetParkingLevelByIdQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getParkingLevelById>>
	> = ({ signal }) => getParkingLevelById(id, requestOptions, signal);

	return {
		queryKey,
		queryFn,
		...queryOptions,
	} as UseSuspenseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getParkingLevelById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetParkingLevelByIdSuspenseInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getParkingLevelById>>
>;
export type GetParkingLevelByIdSuspenseInfiniteQueryError =
	ErrorType<ApiErrorResponse>;

export function useGetParkingLevelByIdSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getParkingLevelById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options: {
		query: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getParkingLevelById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetParkingLevelByIdSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getParkingLevelById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getParkingLevelById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetParkingLevelByIdSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getParkingLevelById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getParkingLevelById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get parking level by ID
 */

export function useGetParkingLevelByIdSuspenseInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getParkingLevelById>>>,
	TError = ErrorType<ApiErrorResponse>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseSuspenseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getParkingLevelById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseSuspenseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetParkingLevelByIdSuspenseInfiniteQueryOptions(
		id,
		options,
	);

	const query = useSuspenseInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseSuspenseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Updates a parking level. Restricted to admins.
 * @summary Update a parking level (Admin only)
 */
export const updateParkingLevel = (
	id: number,
	parkingLevelCreate: BodyType<ParkingLevelCreate>,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<ParkingLevelResponse>(
		{
			url: `/parking-levels/${id}`,
			method: "PUT",
			headers: { "Content-Type": "application/json" },
			data: parkingLevelCreate,
		},
		options,
	);
};

export const getUpdateParkingLevelMutationOptions = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateParkingLevel>>,
		TError,
		{ id: number; data: BodyType<ParkingLevelCreate> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateParkingLevel>>,
	TError,
	{ id: number; data: BodyType<ParkingLevelCreate> },
	TContext
> => {
	const mutationKey = ["updateParkingLevel"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateParkingLevel>>,
		{ id: number; data: BodyType<ParkingLevelCreate> }
	> = (props) => {
		const { id, data } = props ?? {};

		return updateParkingLevel(id, data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateParkingLevelMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateParkingLevel>>
>;
export type UpdateParkingLevelMutationBody = BodyType<ParkingLevelCreate>;
export type UpdateParkingLevelMutationError = ErrorType<
	ApiErrorResponse | ApiErrorResponse | ApiErrorResponse
>;

/**
 * @summary Update a parking level (Admin only)
 */
export const useUpdateParkingLevel = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updateParkingLevel>>,
			TError,
			{ id: number; data: BodyType<ParkingLevelCreate> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof updateParkingLevel>>,
	TError,
	{ id: number; data: BodyType<ParkingLevelCreate> },
	TContext
> => {
	const mutationOptions = getUpdateParkingLevelMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Deletes a parking level. Restricted to admins.
 * @summary Delete a parking level (Admin only)
 */
export const deleteParkingLevel = (
	id: number,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<ParkingLevelResponse>(
		{ url: `/parking-levels/${id}`, method: "DELETE" },
		options,
	);
};

export const getDeleteParkingLevelMutationOptions = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteParkingLevel>>,
		TError,
		{ id: number },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteParkingLevel>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationKey = ["deleteParkingLevel"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteParkingLevel>>,
		{ id: number }
	> = (props) => {
		const { id } = props ?? {};

		return deleteParkingLevel(id, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteParkingLevelMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteParkingLevel>>
>;

export type DeleteParkingLevelMutationError = ErrorType<
	ApiErrorResponse | ApiErrorResponse
>;

/**
 * @summary Delete a parking level (Admin only)
 */
export const useDeleteParkingLevel = <
	TError = ErrorType<ApiErrorResponse | ApiErrorResponse>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteParkingLevel>>,
			TError,
			{ id: number },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteParkingLevel>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationOptions = getDeleteParkingLevelMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
