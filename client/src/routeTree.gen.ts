/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthedRouteImport } from './routes/_authed'
import { Route as EntryRouteRouteImport } from './routes/entry/route'
import { Route as CheckRouteRouteImport } from './routes/check/route'
import { Route as AuthRouteRouteImport } from './routes/_auth/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as EntryIndexRouteImport } from './routes/entry/index'
import { Route as CheckIndexRouteImport } from './routes/check/index'
import { Route as EntrySuccessRouteImport } from './routes/entry/success'
import { Route as AuthedARouteImport } from './routes/_authed.a'
import { Route as AuthSignUpRouteImport } from './routes/_auth/sign-up'
import { Route as AuthSignInRouteImport } from './routes/_auth/sign-in'

const AuthedRoute = AuthedRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const EntryRouteRoute = EntryRouteRouteImport.update({
  id: '/entry',
  path: '/entry',
  getParentRoute: () => rootRouteImport,
} as any)
const CheckRouteRoute = CheckRouteRouteImport.update({
  id: '/check',
  path: '/check',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const EntryIndexRoute = EntryIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => EntryRouteRoute,
} as any)
const CheckIndexRoute = CheckIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CheckRouteRoute,
} as any)
const EntrySuccessRoute = EntrySuccessRouteImport.update({
  id: '/success',
  path: '/success',
  getParentRoute: () => EntryRouteRoute,
} as any)
const AuthedARoute = AuthedARouteImport.update({
  id: '/a',
  path: '/a',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthSignUpRoute = AuthSignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthSignInRoute = AuthSignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/check': typeof CheckRouteRouteWithChildren
  '/entry': typeof EntryRouteRouteWithChildren
  '/sign-in': typeof AuthSignInRoute
  '/sign-up': typeof AuthSignUpRoute
  '/a': typeof AuthedARoute
  '/entry/success': typeof EntrySuccessRoute
  '/check/': typeof CheckIndexRoute
  '/entry/': typeof EntryIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/sign-in': typeof AuthSignInRoute
  '/sign-up': typeof AuthSignUpRoute
  '/a': typeof AuthedARoute
  '/entry/success': typeof EntrySuccessRoute
  '/check': typeof CheckIndexRoute
  '/entry': typeof EntryIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/check': typeof CheckRouteRouteWithChildren
  '/entry': typeof EntryRouteRouteWithChildren
  '/_authed': typeof AuthedRouteWithChildren
  '/_auth/sign-in': typeof AuthSignInRoute
  '/_auth/sign-up': typeof AuthSignUpRoute
  '/_authed/a': typeof AuthedARoute
  '/entry/success': typeof EntrySuccessRoute
  '/check/': typeof CheckIndexRoute
  '/entry/': typeof EntryIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/check'
    | '/entry'
    | '/sign-in'
    | '/sign-up'
    | '/a'
    | '/entry/success'
    | '/check/'
    | '/entry/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/sign-in'
    | '/sign-up'
    | '/a'
    | '/entry/success'
    | '/check'
    | '/entry'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/check'
    | '/entry'
    | '/_authed'
    | '/_auth/sign-in'
    | '/_auth/sign-up'
    | '/_authed/a'
    | '/entry/success'
    | '/check/'
    | '/entry/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  CheckRouteRoute: typeof CheckRouteRouteWithChildren
  EntryRouteRoute: typeof EntryRouteRouteWithChildren
  AuthedRoute: typeof AuthedRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/entry': {
      id: '/entry'
      path: '/entry'
      fullPath: '/entry'
      preLoaderRoute: typeof EntryRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/check': {
      id: '/check'
      path: '/check'
      fullPath: '/check'
      preLoaderRoute: typeof CheckRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/entry/': {
      id: '/entry/'
      path: '/'
      fullPath: '/entry/'
      preLoaderRoute: typeof EntryIndexRouteImport
      parentRoute: typeof EntryRouteRoute
    }
    '/check/': {
      id: '/check/'
      path: '/'
      fullPath: '/check/'
      preLoaderRoute: typeof CheckIndexRouteImport
      parentRoute: typeof CheckRouteRoute
    }
    '/entry/success': {
      id: '/entry/success'
      path: '/success'
      fullPath: '/entry/success'
      preLoaderRoute: typeof EntrySuccessRouteImport
      parentRoute: typeof EntryRouteRoute
    }
    '/_authed/a': {
      id: '/_authed/a'
      path: '/a'
      fullPath: '/a'
      preLoaderRoute: typeof AuthedARouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_auth/sign-up': {
      id: '/_auth/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof AuthSignUpRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/sign-in': {
      id: '/_auth/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof AuthSignInRouteImport
      parentRoute: typeof AuthRouteRoute
    }
  }
}

interface AuthRouteRouteChildren {
  AuthSignInRoute: typeof AuthSignInRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthSignInRoute: AuthSignInRoute,
  AuthSignUpRoute: AuthSignUpRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface CheckRouteRouteChildren {
  CheckIndexRoute: typeof CheckIndexRoute
}

const CheckRouteRouteChildren: CheckRouteRouteChildren = {
  CheckIndexRoute: CheckIndexRoute,
}

const CheckRouteRouteWithChildren = CheckRouteRoute._addFileChildren(
  CheckRouteRouteChildren,
)

interface EntryRouteRouteChildren {
  EntrySuccessRoute: typeof EntrySuccessRoute
  EntryIndexRoute: typeof EntryIndexRoute
}

const EntryRouteRouteChildren: EntryRouteRouteChildren = {
  EntrySuccessRoute: EntrySuccessRoute,
  EntryIndexRoute: EntryIndexRoute,
}

const EntryRouteRouteWithChildren = EntryRouteRoute._addFileChildren(
  EntryRouteRouteChildren,
)

interface AuthedRouteChildren {
  AuthedARoute: typeof AuthedARoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedARoute: AuthedARoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  CheckRouteRoute: CheckRouteRouteWithChildren,
  EntryRouteRoute: EntryRouteRouteWithChildren,
  AuthedRoute: AuthedRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
