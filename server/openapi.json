{
  "openapi": "3.0.3",
  "info": {
    "title": "Parking Management API",
    "description": "API for managing users, parking levels, vehicles, and transactions for a parking facility.\nThis documentation provides a base for all the resources defined in the database schema.\n",
    "version": "1.0.0",
    "contact": {
      "name": "API Support",
      "url": "http://www.example.com/support",
      "email": "support@example.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Production Server"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Operations related to user authentication."
    },
    {
      "name": "Users",
      "description": "Admin CRUD operations for managing users."
    },
    {
      "name": "Members",
      "description": "Endpoints for member-specific actions and admin CRUD for memberships."
    },
    {
      "name": "Membership Plans",
      "description": "Public and admin endpoints for managing membership plans."
    },
    {
      "name": "Transactions",
      "description": "Endpoints for the parking lifecycle and admin management of transactions."
    },
    {
      "name": "Dashboard",
      "description": "Endpoints for retrieving dashboard data."
    },
    {
      "name": "Parking Levels",
      "description": "Public and admin endpoints for managing parking levels."
    },
    {
      "name": "Categories",
      "description": "Public and admin endpoints for managing vehicle categories."
    },
    {
      "name": "Prices",
      "description": "Public and admin endpoints for managing parking prices."
    },
    {
      "name": "Vehicle Details",
      "description": "Admin CRUD operations for managing vehicle details."
    },
    {
      "name": "Audit Logs",
      "description": "Admin endpoints for viewing audit logs."
    }
  ],
  "components": {
    "schemas": {
      "BaseResponse": {
        "required": ["success", "message"],
        "type": "object",
        "properties": {
          "success": { "type": "boolean", "example": true },
          "message": { "type": "string", "example": "Success" }
        }
      },
      "User": {
        "type": "object",
        "required": ["id", "fullname", "username", "role"],
        "properties": {
          "id": { "type": "integer", "example": 1 },
          "fullname": { "type": "string", "example": "John Doe" },
          "username": { "type": "string", "example": "john.doe" },
          "role": {
            "type": "string",
            "enum": ["admin", "member"],
            "example": "member"
          }
        }
      },
      "UserCreate": {
        "type": "object",
        "required": ["fullname", "username", "password", "role"],
        "properties": {
          "fullname": { "type": "string", "example": "Jane Doe" },
          "username": { "type": "string", "example": "jane.doe" },
          "password": {
            "type": "string",
            "format": "password",
            "example": "strongpassword123"
          },
          "role": {
            "type": "string",
            "enum": ["admin", "member"],
            "example": "admin"
          }
        }
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "fullname": {
            "type": "string",
            "example": "Jane D. Smith"
          },
          "username": {
            "type": "string",
            "example": "jane.smith"
          },
          "role": {
            "type": "string",
            "enum": ["admin", "member"],
            "example": "member"
          }
        }
      },
      "ParkingLevel": {
        "type": "object",
        "required": ["id", "name", "max_weight"],
        "properties": {
          "id": { "type": "integer", "example": 1 },
          "name": { "type": "string", "example": "Level A1" },
          "max_weight": { "type": "number", "format": "double", "description": "Maximum allowed weight in kilograms for this level.", "example": 2500.5 }
        }
      },
      "ParkingLevelCreate": {
        "type": "object",
        "required": ["name", "maxWeight"],
        "properties": {
          "name": {
            "type": "string",
            "example": "Level C3"
          },
          "maxWeight": {
            "type": "number",
            "format": "double",
            "example": 3000
          }
        }
      },
      "Member": {
        "type": "object",
        "required": ["id", "user_id", "joined_at", "ended_at"],
        "properties": {
          "id": { "type": "integer", "example": 101 },
          "user_id": { "type": "integer", "example": 1 },
          "joined_at": { "type": "string", "format": "date-time" },
          "ended_at": { "type": "string", "format": "date-time" }
        }
      },
      "MemberCreate": {
        "type": "object",
        "required": ["userId", "endedAt"],
        "properties": {
          "userId": {
            "type": "integer",
            "description": "The ID of the user to grant membership to.",
            "example": 25
          },
          "endedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date the new membership will expire."
          }
        }
      },
      "MembershipRenewal": {
        "type": "object",
        "description": "Payload for renewing a membership using a specific plan ID.",
        "required": ["membershipPlanId"],
        "properties": {
          "membershipPlanId": {
            "type": "integer",
            "description": "The ID of the membership plan being purchased.",
            "example": 1
          }
        }
      },
      "MembershipPlan": {
        "type": "object",
        "required": ["id", "cost", "period"],
        "properties": {
          "id": { "type": "integer", "example": 1 },
          "cost": { "type": "number", "format": "double", "example": 50 },
          "period": { "type": "integer", "description": "Duration of the plan in months.", "example": 1 }
        }
      },
      "MembershipPlanCreate": {
        "type": "object",
        "required": ["cost", "period"],
        "properties": {
          "cost": { "type": "number", "format": "double", "example": 100 },
          "period": { "type": "integer", "description": "Duration of the plan in months.", "example": 6 }
        }
      },
      "DashboardSummary": {
        "type": "object",
        "description": "Summary data for the admin or member dashboard.",
        "properties": {
          "activeTransactions": {
            "type": "integer",
            "description": "(Admin) Total number of currently parked vehicles.",
            "example": 78
          },
          "totalCapacity": {
            "type": "integer",
            "description": "(Admin) Total parking capacity.",
            "example": 200
          },
          "membershipStatus": {
            "type": "string",
            "description": "(Member) Status of the member's subscription.",
            "example": "Active"
          },
          "membershipEndsAt": {
            "type": "string",
            "format": "date-time",
            "description": "(Member) The date the membership expires."
          }
        }
      },
      "Category": {
        "type": "object",
        "required": ["id", "name", "weight"],
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the vehicle category.",
            "example": "Motorcycle"
          },
          "weight": {
            "type": "number",
            "format": "double",
            "description": "Average weight of vehicles in this category.",
            "example": 200
          },
          "icon": {
            "type": "string",
            "description": "URL or identifier for the category icon.",
            "example": "icon-motorcycle.png"
          },
          "thumbnail": {
            "type": "string",
            "description": "URL or identifier for the category thumbnail image.",
            "example": "thumb-motorcycle.jpg"
          }
        }
      },
      "CategoryCreate": {
        "type": "object",
        "required": ["name", "weight", "icon", "thumbnail"],
        "properties": {
          "name": {
            "type": "string",
            "example": "Electric Car"
          },
          "weight": {
            "type": "number",
            "format": "double",
            "example": 1800
          },
          "icon": {
            "type": "string",
            "example": "icon-electric-car.png"
          },
          "thumbnail": {
            "type": "string",
            "example": "thumb-electric-car.jpg"
          }
        }
      },
      "Price": {
        "type": "object",
        "required": ["id", "category_id", "amount", "type", "is_active"],
        "properties": {
          "id": { "type": "integer", "example": 1 },
          "category_id": { "type": "integer", "example": 1 },
          "amount": { "type": "number", "format": "double", "example": 5000 },
          "type": { "type": "string", "description": "Business rule type for the price.", "example": "INITIAL_BLOCK" },
          "block_hours": { "type": "integer", "nullable": true, "description": "Duration in hours for INITIAL_BLOCK type.", "example": 2 },
          "is_active": { "type": "boolean", "default": true },
          "valid_from": { "type": "string", "format": "date-time", "nullable": true },
          "valid_until": { "type": "string", "format": "date-time", "nullable": true }
        }
      },
      "PriceCreate": {
        "type": "object",
        "required": ["categoryId", "amount", "type"],
        "properties": {
          "categoryId": {
            "type": "integer",
            "example": 4
          },
          "amount": {
            "type": "number",
            "format": "double",
            "example": 7.5
          },
          "type": {
            "type": "string",
            "description": "Business rule type for the price.",
            "example": "PER_HOUR"
          },
          "block_hours": {
            "type": "integer",
            "nullable": true,
            "description": "Duration in hours for INITIAL_BLOCK type. Required if type is 'INITIAL_BLOCK'.",
            "example": 1
          },
          "is_active": {
            "type": "boolean",
            "default": true
          },
          "valid_from": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "valid_until": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "VehicleDetail": {
        "type": "object",
        "required": ["id", "plate_number", "category_id"],
        "properties": {
          "id": { "type": "integer", "example": 501 },
          "plate_number": { "type": "string", "example": "B1234XYZ" },
          "category_id": { "type": "integer", "example": 2 }
        }
      },
      "VehicleDetailCreate": {
        "type": "object",
        "required": ["plateNumber", "categoryId"],
        "properties": {
          "plateNumber": {
            "type": "string",
            "example": "B1234XYZ"
          },
          "categoryId": {
            "type": "integer",
            "example": 2
          }
        }
      },
      "VehicleDetailUpdate": {
        "type": "object",
        "properties": {
          "plateNumber": {
            "type": "string",
            "example": "B5678ABC"
          },
          "categoryId": {
            "type": "integer",
            "example": 3
          }
        }
      },
      "Transaction": {
        "type": "object",
        "required": ["id", "status", "access_code", "vehicle_detail_id", "parking_level_id", "vehicleDetail", "parkingLevel", "created_at", "updated_at"],
        "properties": {
          "id": { "type": "integer", "example": 1001 },
          "status": { "type": "string", "description": "Status of the transaction, indicating vehicle entry or exit.", "enum": ["ENTRY", "EXIT"], "example": "ENTRY" },
          "paid_amount": { "type": "number", "format": "double", "nullable": true },
          "access_code": { "type": "string", "description": "Unique code for this transaction.", "example": "a1b2c3d4-e5f6-7890-1234-567890abcdef" },
          "user_id": { "type": "integer", "nullable": true },
          "user": {
            "$ref": "#/components/schemas/User",
            "nullable": true,
            "description": "Expanded user information when available."
          },
          "vehicle_detail_id": { "type": "integer" },
          "vehicleDetail": {
            "$ref": "#/components/schemas/VehicleDetail",
            "description": "Vehicle detail associated to this transaction."
          },
          "parking_level_id": { "type": "integer" },
          "parkingLevel": {
            "$ref": "#/components/schemas/ParkingLevel",
            "description": "Parking level information for this transaction."
          },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" }
        }
      },
      "TransactionCreate": {
        "description": "Payload for creating a new transaction when a vehicle enters.",
        "type": "object",
        "required": ["plateNumber", "categoryId", "parkingLevelId"],
        "properties": {
          "userId": {
            "type": "integer",
            "example": 2
          },
          "plateNumber": {
            "type": "string",
            "example": "D4321ABC"
          },
          "categoryId": {
            "type": "integer",
            "example": 3
          },
          "parkingLevelId": {
            "type": "integer",
            "example": 2
          }
        }
      },
      "TransactionUpdate": {
        "type": "object",
        "description": "Payload for an admin to manually update a transaction.",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["ENTRY", "EXIT"],
            "example": "EXIT"
          },
          "paidAmount": {
            "type": "number",
            "format": "double",
            "example": 25.5
          }
        }
      },
      "AuditLog": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "example": 1 },
          "context": { "type": "string", "example": "USER_LOGIN_SUCCESS" },
          "type": { "type": "string", "example": "AUTHENTICATION" },
          "created_at": { "type": "string", "format": "date-time" },
          "created_by": { "type": "integer", "example": 1 }
        }
      },
      "LoginMember": {
        "type": "object",
        "required": ["username", "password"],
        "properties": {
          "username": {
            "type": "string",
            "description": "The member's username.",
            "example": "john.doe"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "strongpassword123"
          }
        }
      },
      "ApiErrorResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "required": ["data"],
            "properties": {
              "data": {
                "type": "object",
                "required": ["errorCode"],
                "properties": {
                  "errorCode": {
                    "type": "string",
                    "description": "A unique, machine-readable error code.",
                    "example": "RESOURCE_NOT_FOUND"
                  },
                  "errorMeta": {
                    "type": "array",
                    "description": "Optional metadata for validation errors.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "field": {
                          "type": "string",
                          "example": "password"
                        },
                        "issue": {
                          "type": "string",
                          "example": "Password must be at least 8 characters long."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "UserResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        ]
      },
      "UserArrayResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "required": ["data"],
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        ]
      },
      "TokenResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "required": ["data"],
            "properties": {
              "data": {
                "type": "object",
                "required": ["token"],
                "properties": {
                  "token": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      },
      "MemberResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "required": ["data"],
            "properties": {
              "data": {
                "$ref": "#/components/schemas/Member"
              }
            }
          }
        ]
      },
      "MemberArrayResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "required": ["data"],
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          }
        ]
      },
      "MembershipPlanResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "required": ["data"],
            "properties": {
              "data": {
                "$ref": "#/components/schemas/MembershipPlan"
              }
            }
          }
        ]
      },
      "MembershipPlanArrayResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "required": ["data"],
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MembershipPlan"
                }
              }
            }
          }
        ]
      },
      "TransactionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "required": ["data"],
            "properties": {
              "data": {
                "$ref": "#/components/schemas/Transaction"
              }
            }
          }
        ]
      },
      "TransactionArrayResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "required": ["data"],
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          }
        ]
      },
      "DashboardSummaryResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "required": ["data"],
            "properties": {
              "data": {
                "$ref": "#/components/schemas/DashboardSummary"
              }
            }
          }
        ]
      },
      "ParkingLevelResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "required": ["data"],
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ParkingLevel"
              }
            }
          }
        ]
      },
      "ParkingLevelArrayResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "required": ["data"],
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ParkingLevel"
                }
              }
            }
          }
        ]
      },
      "CategoryResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "required": ["data"],
            "properties": {
              "data": {
                "$ref": "#/components/schemas/Category"
              }
            }
          }
        ]
      },
      "CategoryArrayResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "required": ["data"],
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          }
        ]
      },
      "PriceResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "required": ["data"],
            "properties": {
              "data": {
                "$ref": "#/components/schemas/Price"
              }
            }
          }
        ]
      },
      "PriceArrayResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "required": ["data"],
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Price"
                }
              }
            }
          }
        ]
      },
      "VehicleDetailResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "required": ["data"],
            "properties": {
              "data": {
                "$ref": "#/components/schemas/VehicleDetail"
              }
            }
          }
        ]
      },
      "VehicleDetailArrayResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "required": ["data"],
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VehicleDetail"
                }
              }
            }
          }
        ]
      },
      "AuditLogResponse": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean", "example": true },
          "message": { "type": "string" },
          "data": { "$ref": "#/components/schemas/AuditLog" }
        }
      },
      "AuditLogArrayResponse": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean", "example": true },
          "message": { "type": "string" },
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AuditLog" }
          }
        }
      },
      "SuccessResponse": {
        "$ref": "#/components/schemas/BaseResponse"
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Member or Admin Login",
        "description": "Authenticates a member or admin and returns a JWT token.",
        "operationId": "loginUser",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginMember"
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Successful authentication", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TokenResponse" } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "500": { "description": "Internal Server Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["Users"],
        "summary": "List all users (Admin only)",
        "description": "Retrieves a list of all user accounts. This operation is restricted to admin users.",
        "operationId": "listUsers",
        "responses": {
          "200": { "description": "A list of users.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserArrayResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      },
      "post": {
        "tags": ["Users"],
        "summary": "Create a new user (Admin only)",
        "description": "Creates a new user account in the system. This operation is restricted to admin users.",
        "operationId": "createUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          }
        },
        "responses": {
          "201": { "description": "User created successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserResponse" } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user by ID (Admin only)",
        "description": "Retrieves the details of a specific user by their unique ID. This operation is restricted to admin users.",
        "operationId": "getUserById",
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" } } ],
        "responses": {
          "200": { "description": "OK", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "404": { "description": "User not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update a user (Admin only)",
        "description": "Updates a user's details. This operation is restricted to admin users.",
        "operationId": "updateUser",
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" } } ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": { "description": "User updated successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserResponse" } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "404": { "description": "User not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete a user (Admin only)",
        "description": "Deletes a user from the system. This operation is restricted to admin users.",
        "operationId": "deleteUser",
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" } } ],
        "responses": {
          "200": { "description": "User deleted successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "404": { "description": "User not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      }
    },
    "/members": {
      "get": {
        "tags": ["Members"],
        "summary": "List all members (Admin only)",
        "description": "Retrieves a list of all member records. Restricted to admins.",
        "operationId": "listMembers",
        "responses": {
          "200": { "description": "A list of members.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemberArrayResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      },
      "post": {
        "tags": ["Members"],
        "summary": "Create a member record (Admin only)",
        "description": "Creates a new member record for an existing user. Restricted to admins.",
        "operationId": "createMember",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemberCreate"
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Member record created successfully.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemberResponse" } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      }
    },
    "/members/{id}": {
      "get": {
        "tags": ["Members"],
        "summary": "Get member by ID (Admin only)",
        "description": "Retrieves a specific member record by ID. Restricted to admins.",
        "operationId": "getMemberById",
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" } } ],
        "responses": {
          "200": { "description": "OK", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemberResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "404": { "description": "Member not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      },
      "put": {
        "tags": ["Members"],
        "summary": "Update a member (Admin only)",
        "description": "Updates a member record. Restricted to admins.",
        "operationId": "updateMember",
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" } } ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "properties": { "endedAt": { "type": "string", "format": "date-time" } } } } }
        },
        "responses": {
          "200": { "description": "Member updated successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemberResponse" } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "404": { "description": "Member not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      },
      "delete": {
        "tags": ["Members"],
        "summary": "Delete a member record (Admin only)",
        "description": "Deletes a member record. Restricted to admins.",
        "operationId": "deleteMember",
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" } } ],
        "responses": {
          "200": { "description": "Member deleted successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemberResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "404": { "description": "Member not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      }
    },
    "/members/me/renew": {
      "post": {
        "tags": ["Members"],
        "summary": "Renew a membership",
        "description": "Allows the currently authenticated member to extend their membership subscription.",
        "operationId": "renewCurrentMember",
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MembershipRenewal" } } } },
        "responses": {
          "200": { "description": "Membership renewed successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemberResponse" } } } },
          "400": { "description": "Bad request or payment failed", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      }
    },
    "/members/me/transactions": {
      "get": {
        "tags": ["Members"],
        "summary": "Get member's transaction history",
        "description": "Fetches a list of all parking transactions for the authenticated member.",
        "operationId": "getCurrentMemberTransactions",
        "responses": {
          "200": { "description": "A list of transactions", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TransactionArrayResponse" } } } }
        }
      }
    },
    "/membership-plans": {
      "get": {
        "tags": ["Membership Plans"],
        "summary": "List all membership plans",
        "description": "Retrieves a list of all available membership plans.",
        "operationId": "listMembershipPlans",
        "security": [],
        "responses": {
          "200": { "description": "A list of membership plans.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MembershipPlanArrayResponse" } } } }
        }
      },
      "post": {
        "tags": ["Membership Plans"],
        "summary": "Create a membership plan (Admin only)",
        "description": "Creates a new membership plan. Restricted to admins.",
        "operationId": "createMembershipPlan",
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MembershipPlanCreate" } } } },
        "responses": {
          "201": { "description": "Membership plan created successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MembershipPlanResponse" } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      }
    },
    "/membership-plans/{id}": {
      "get": {
        "tags": ["Membership Plans"],
        "summary": "Get membership plan by ID",
        "description": "Retrieves details for a specific membership plan.",
        "operationId": "getMembershipPlanById",
        "security": [],
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" } } ],
        "responses": {
          "200": { "description": "OK", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MembershipPlanResponse" } } } },
          "404": { "description": "Membership plan not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      },
      "put": {
        "tags": ["Membership Plans"],
        "summary": "Update a membership plan (Admin only)",
        "description": "Updates a membership plan. Restricted to admins.",
        "operationId": "updateMembershipPlan",
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" } } ],
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MembershipPlanCreate" } } } },
        "responses": {
          "200": { "description": "Membership plan updated successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MembershipPlanResponse" } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "404": { "description": "Membership plan not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      },
      "delete": {
        "tags": ["Membership Plans"],
        "summary": "Delete a membership plan (Admin only)",
        "description": "Deletes a membership plan. Restricted to admins.",
        "operationId": "deleteMembershipPlan",
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" } } ],
        "responses": {
          "200": { "description": "Membership plan deleted successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MembershipPlanResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "404": { "description": "Membership plan not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      }
    },
    "/transactions": {
      "get": {
        "tags": ["Transactions"],
        "summary": "List all transactions (Admin only)",
        "description": "Retrieves a list of all transactions. Restricted to admins.",
        "operationId": "listTransactions",
        "responses": {
          "200": { "description": "A list of transactions.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TransactionArrayResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      }
    },
    "/transactions/entry": {
      "post": {
        "tags": ["Transactions"],
        "summary": "Create a new transaction (vehicle entry)",
        "description": "This endpoint is called when a vehicle enters the parking facility. It creates a vehicle detail and a new transaction record.",
        "operationId": "createEntryTransaction",
        "security": [],
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TransactionCreate" } } } },
        "responses": {
          "201": { "description": "Transaction created successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TransactionResponse" } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      }
    },
    "/transactions/{accessCode}": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Get Transaction Status (Guest)",
        "description": "Allows a guest to retrieve the status of their active parking transaction using the access code from their ticket. This endpoint is public and does not require authentication.",
        "operationId": "getGuestTransactionByAccessCode",
        "security": [],
        "parameters": [ { "name": "accessCode", "in": "path", "required": true, "schema": { "type": "string" } } ],
        "responses": {
          "200": { "description": "OK", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TransactionResponse" } } } },
          "404": { "description": "Transaction not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      }
    },
    "/transactions/{accessCode}/payment": {
      "post": {
        "tags": ["Transactions"],
        "summary": "Process payment for a transaction",
        "description": "Processes a payment for an active transaction and updates its status.",
        "operationId": "processTransactionPayment",
        "security": [],
        "parameters": [ { "name": "accessCode", "in": "path", "required": true, "schema": { "type": "string" } } ],
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "type": "object", "properties": { "paidAmount": { "type": "number", "example": 15.75 } } } } } },
        "responses": {
          "200": { "description": "Payment successful", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TransactionResponse" } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      }
    },
    "/transactions/{accessCode}/exit": {
      "post": {
        "tags": ["Transactions"],
        "summary": "Complete a transaction (vehicle exit)",
        "description": "Marks a transaction as completed when a vehicle exits the parking facility. The final fee is calculated and status updated.",
        "operationId": "completeTransaction",
        "security": [],
        "parameters": [ { "name": "accessCode", "in": "path", "required": true, "schema": { "type": "string" } } ],
        "responses": {
          "200": { "description": "Vehicle exit processed successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TransactionResponse" } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      }
    },
    "/transactions/manage/{accessCode}": {
      "put": {
        "tags": ["Transactions"],
        "summary": "Manually update a transaction (Admin only)",
        "description": "Allows an admin to manually update transaction details by its access code. Restricted to admins.",
        "operationId": "updateTransactionByAccessCode",
        "parameters": [ { "name": "accessCode", "in": "path", "required": true, "schema": { "type": "string" } } ],
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TransactionUpdate" } } } },
        "responses": {
          "200": { "description": "Transaction updated successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TransactionResponse" } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "404": { "description": "Transaction not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      },
      "delete": {
        "tags": ["Transactions"],
        "summary": "Delete a transaction (Admin only)",
        "description": "Allows an admin to delete/void a transaction by its access code. Restricted to admins.",
        "operationId": "deleteTransactionByAccessCode",
        "parameters": [ { "name": "accessCode", "in": "path", "required": true, "schema": { "type": "string" } } ],
        "responses": {
          "200": { "description": "Transaction deleted successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TransactionResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "404": { "description": "Transaction not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      }
    },
    "/dashboard/summary": {
      "get": {
        "tags": ["Dashboard"],
        "summary": "Get dashboard summary",
        "description": "Retrieves summary data for the dashboard. The response varies based on the user's role (Admin or Member).",
        "operationId": "getDashboardSummary",
        "responses": {
          "200": { "description": "Dashboard summary data", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DashboardSummaryResponse" } } } }
        }
      }
    },
    "/parking-levels": {
      "get": {
        "tags": ["Parking Levels"],
        "summary": "List all parking levels",
        "description": "Returns a list of all available parking levels in the facility.",
        "operationId": "listParkingLevels",
        "security": [],
        "responses": {
          "200": { "description": "A list of parking levels", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ParkingLevelArrayResponse" } } } }
        }
      },
      "post": {
        "tags": ["Parking Levels"],
        "summary": "Create a parking level (Admin only)",
        "description": "Creates a new parking level. Restricted to admins.",
        "operationId": "createParkingLevel",
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ParkingLevelCreate" } } } },
        "responses": {
          "201": { "description": "Parking level created successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ParkingLevelResponse" } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      }
    },
    "/parking-levels/{id}": {
      "get": {
        "tags": ["Parking Levels"],
        "summary": "Get parking level by ID",
        "description": "Retrieves details for a specific parking level.",
        "operationId": "getParkingLevelById",
        "security": [],
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" } } ],
        "responses": {
          "200": { "description": "OK", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ParkingLevelResponse" } } } },
          "404": { "description": "Parking level not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      },
      "put": {
        "tags": ["Parking Levels"],
        "summary": "Update a parking level (Admin only)",
        "description": "Updates a parking level. Restricted to admins.",
        "operationId": "updateParkingLevel",
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" } } ],
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ParkingLevelCreate" } } } },
        "responses": {
          "200": { "description": "Parking level updated successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ParkingLevelResponse" } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "404": { "description": "Parking level not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      },
      "delete": {
        "tags": ["Parking Levels"],
        "summary": "Delete a parking level (Admin only)",
        "description": "Deletes a parking level. Restricted to admins.",
        "operationId": "deleteParkingLevel",
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" } } ],
        "responses": {
          "200": { "description": "Parking level deleted successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ParkingLevelResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "404": { "description": "Parking level not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": ["Categories"],
        "summary": "List all vehicle categories",
        "description": "Returns a list of all vehicle categories.",
        "operationId": "listCategories",
        "security": [],
        "responses": {
          "200": { "description": "A list of categories.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CategoryArrayResponse" } } } }
        }
      },
      "post": {
        "tags": ["Categories"],
        "summary": "Create a vehicle category (Admin only)",
        "description": "Creates a new vehicle category. Restricted to admins.",
        "operationId": "createCategory",
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CategoryCreate" } } } },
        "responses": {
          "201": { "description": "Category created successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CategoryResponse" } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      }
    },
    "/categories/{id}": {
      "get": {
        "tags": ["Categories"],
        "summary": "Get category by ID",
        "description": "Retrieves details for a specific vehicle category.",
        "operationId": "getCategoryById",
        "security": [],
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" } } ],
        "responses": {
          "200": { "description": "OK", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CategoryResponse" } } } },
          "404": { "description": "Category not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      },
      "put": {
        "tags": ["Categories"],
        "summary": "Update a category (Admin only)",
        "description": "Updates a vehicle category. Restricted to admins.",
        "operationId": "updateCategory",
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" } } ],
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CategoryCreate" } } } },
        "responses": {
          "200": { "description": "Category updated successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CategoryResponse" } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "404": { "description": "Category not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      },
      "delete": {
        "tags": ["Categories"],
        "summary": "Delete a category (Admin only)",
        "description": "Deletes a vehicle category. Restricted to admins.",
        "operationId": "deleteCategory",
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" } } ],
        "responses": {
          "200": { "description": "Category deleted successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CategoryResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "404": { "description": "Category not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      }
    },
    "/prices": {
      "get": {
        "tags": ["Prices"],
        "summary": "List all prices",
        "description": "Returns a list of all price configurations.",
        "operationId": "listPrices",
        "security": [],
        "responses": {
          "200": { "description": "A list of prices.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PriceArrayResponse" } } } }
        }
      },
      "post": {
        "tags": ["Prices"],
        "summary": "Create a price (Admin only)",
        "description": "Creates a new price configuration. Restricted to admins.",
        "operationId": "createPrice",
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PriceCreate" } } } },
        "responses": {
          "201": { "description": "Price created successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PriceResponse" } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      }
    },
    "/prices/{id}": {
      "get": {
        "tags": ["Prices"],
        "summary": "Get price by ID",
        "description": "Retrieves details for a specific price configuration.",
        "operationId": "getPriceById",
        "security": [],
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" } } ],
        "responses": {
          "200": { "description": "OK", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PriceResponse" } } } },
          "404": { "description": "Price not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      },
      "put": {
        "tags": ["Prices"],
        "summary": "Update a price (Admin only)",
        "description": "Updates a price configuration. Restricted to admins.",
        "operationId": "updatePrice",
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" } } ],
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PriceCreate" } } } },
        "responses": {
          "200": { "description": "Price updated successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PriceResponse" } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "404": { "description": "Price not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      },
      "delete": {
        "tags": ["Prices"],
        "summary": "Delete a price (Admin only)",
        "description": "Deletes a price configuration. Restricted to admins.",
        "operationId": "deletePrice",
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" } } ],
        "responses": {
          "200": { "description": "Price deleted successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PriceResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "404": { "description": "Price not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      }
    },
    "/prices/{categoryId}/fee": {
      "get": {
        "tags": ["Prices"],
        "summary": "Get prices by category ID",
        "description": "Retrieves all price configurations for a specific vehicle category.",
        "operationId": "getPricesByCategoryId",
        "security": [],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "description": "The ID of the vehicle category.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of prices for the specified category.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceArrayResponse"
                }
              }
            }
          },
          "404": {
            "description": "Category not found or no prices found for this category.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/vehicle-details": {
      "get": {
        "tags": ["Vehicle Details"],
        "summary": "List all vehicle details (Admin only)",
        "security": [ { "BearerAuth": [] } ],
        "responses": {
          "200": { "description": "A list of vehicle details.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/VehicleDetailArrayResponse" } } } }
        }
      },
      "post": {
        "tags": ["Vehicle Details"],
        "summary": "Create a new vehicle detail (Admin only)",
        "security": [ { "BearerAuth": [] } ],
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/VehicleDetailCreate" } } } },
        "responses": {
          "201": { "description": "Vehicle detail created successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/VehicleDetailResponse" } } } }
        }
      }
    },
    "/vehicle-details/{id}": {
      "get": {
        "tags": ["Vehicle Details"],
        "summary": "Get vehicle detail by ID (Admin only)",
        "security": [ { "BearerAuth": [] } ],
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" } } ],
        "responses": {
          "200": { "description": "OK", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/VehicleDetailResponse" } } } },
          "404": { "description": "Vehicle detail not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      },
      "put": {
        "tags": ["Vehicle Details"],
        "summary": "Update a vehicle detail (Admin only)",
        "security": [ { "BearerAuth": [] } ],
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" } } ],
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/VehicleDetailUpdate" } } } },
        "responses": {
          "200": { "description": "Vehicle detail updated successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/VehicleDetailResponse" } } } }
        }
      },
      "delete": {
        "tags": ["Vehicle Details"],
        "summary": "Delete a vehicle detail (Admin only)",
        "security": [ { "BearerAuth": [] } ],
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" } } ],
        "responses": {
          "200": { "description": "Vehicle detail deleted successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/VehicleDetailResponse" } } } },
          "404": { "description": "Vehicle detail not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      }
    },
    "/audit-logs": {
      "get": {
        "tags": ["Audit Logs"],
        "summary": "List all audit logs (Admin only)",
        "description": "Retrieves a list of all audit log records. Restricted to admins.",
        "operationId": "listAuditLogs",
        "responses": {
          "200": { "description": "A list of audit logs.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AuditLogArrayResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      }
    },
    "/audit-logs/{id}": {
      "get": {
        "tags": ["Audit Logs"],
        "summary": "Get audit log by ID (Admin only)",
        "description": "Retrieves a specific audit log by ID. Restricted to admins.",
        "operationId": "getAuditLogById",
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" } } ],
        "responses": {
          "200": { "description": "OK", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AuditLogResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } },
          "404": { "description": "Audit log not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } } }
        }
      }
    }
  }
}