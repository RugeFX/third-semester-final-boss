{
  "openapi": "3.0.3",
  "info": {
    "title": "Parking Management API",
    "description": "API for managing users, parking levels, vehicles, and transactions for a parking facility.\nThis documentation provides a base for all the resources defined in the database schema.\n",
    "version": "1.0.0",
    "contact": {
      "name": "API Support",
      "url": "http://www.example.com/support",
      "email": "support@example.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Production Server"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Operations related to user authentication."
    },
    {
      "name": "Users",
      "description": "Admin CRUD operations for managing users."
    },
    {
      "name": "Members",
      "description": "Endpoints for member-specific actions and admin CRUD for memberships."
    },
    {
      "name": "Transactions",
      "description": "Endpoints for the parking lifecycle and admin management of transactions."
    },
    {
      "name": "Dashboard",
      "description": "Endpoints for retrieving dashboard data."
    },
    {
      "name": "Parking Levels",
      "description": "Public and admin endpoints for managing parking levels."
    },
    {
      "name": "Categories",
      "description": "Public and admin endpoints for managing vehicle categories."
    },
    {
      "name": "Prices",
      "description": "Public and admin endpoints for managing parking prices."
    }
  ],
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the user.",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "role": {
            "type": "string",
            "description": "Role of the user.",
            "enum": ["admin", "member"],
            "example": "member"
          }
        }
      },
      "UserCreate": {
        "type": "object",
        "required": ["name", "password", "role"],
        "properties": {
          "name": {
            "type": "string",
            "example": "Jane Doe"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "strongpassword123"
          },
          "role": {
            "type": "string",
            "enum": ["admin", "member"],
            "example": "admin"
          }
        }
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Jane Smith"
          },
          "role": {
            "type": "string",
            "enum": ["admin", "member"],
            "example": "member"
          }
        }
      },
      "ParkingLevel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Level A1"
          },
          "maxWeight": {
            "type": "number",
            "format": "double",
            "description": "Maximum allowed weight in kilograms for this level.",
            "example": 2500.5
          }
        }
      },
      "ParkingLevelCreate": {
        "type": "object",
        "required": ["name", "maxWeight"],
        "properties": {
          "name": {
            "type": "string",
            "example": "Level C3"
          },
          "maxWeight": {
            "type": "number",
            "format": "double",
            "example": 3000
          }
        }
      },
      "Member": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 101
          },
          "userId": {
            "type": "integer",
            "example": 1
          },
          "joinedAt": {
            "type": "string",
            "format": "date-time"
          },
          "endedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "MemberCreate": {
        "type": "object",
        "required": ["userId", "endedAt"],
        "properties": {
          "userId": {
            "type": "integer",
            "description": "The ID of the user to grant membership to.",
            "example": 25
          },
          "endedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date the new membership will expire."
          }
        }
      },
      "MembershipRenewal": {
        "type": "object",
        "description": "Payload for renewing a membership.",
        "required": ["renewalPeriodMonths", "amountPaid"],
        "properties": {
          "renewalPeriodMonths": {
            "type": "integer",
            "description": "Number of months to extend the membership.",
            "example": 12
          },
          "amountPaid": {
            "type": "number",
            "format": "double",
            "description": "The amount paid for the renewal.",
            "example": 150
          }
        }
      },
      "DashboardSummary": {
        "type": "object",
        "description": "Summary data for the admin or member dashboard.",
        "properties": {
          "activeTransactions": {
            "type": "integer",
            "description": "(Admin) Total number of currently parked vehicles.",
            "example": 78
          },
          "totalCapacity": {
            "type": "integer",
            "description": "(Admin) Total parking capacity.",
            "example": 200
          },
          "membershipStatus": {
            "type": "string",
            "description": "(Member) Status of the member's subscription.",
            "example": "Active"
          },
          "membershipEndsAt": {
            "type": "string",
            "format": "date-time",
            "description": "(Member) The date the membership expires."
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the vehicle category.",
            "example": "Motorcycle"
          },
          "weight": {
            "type": "number",
            "format": "double",
            "description": "Average weight of vehicles in this category.",
            "example": 200
          }
        }
      },
      "CategoryCreate": {
        "type": "object",
        "required": ["name", "weight"],
        "properties": {
          "name": {
            "type": "string",
            "example": "Electric Car"
          },
          "weight": {
            "type": "number",
            "format": "double",
            "example": 1800
          }
        }
      },
      "Price": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "categoryId": {
            "type": "integer",
            "example": 1
          },
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Price per hour for this category.",
            "example": 2.5
          }
        }
      },
      "PriceCreate": {
        "type": "object",
        "required": ["categoryId", "amount"],
        "properties": {
          "categoryId": {
            "type": "integer",
            "example": 4
          },
          "amount": {
            "type": "number",
            "format": "double",
            "example": 7.5
          }
        }
      },
      "VehicleDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 501
          },
          "plateNumber": {
            "type": "string",
            "example": "B1234XYZ"
          },
          "categoryId": {
            "type": "integer",
            "example": 2
          }
        }
      },
      "VehicleDetailCreate": {
        "type": "object",
        "required": ["plate_number", "category_id"],
        "properties": {
          "plate_number": {
            "type": "string",
            "example": "B1234XYZ"
          },
          "category_id": {
            "type": "integer",
            "example": 2
          }
        }
      },
      "VehicleDetailUpdate": {
        "type": "object",
        "properties": {
          "plate_number": {
            "type": "string",
            "example": "B5678ABC"
          },
          "category_id": {
            "type": "integer",
            "example": 3
          }
        }
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1001
          },
          "status": {
            "type": "string",
            "description": "Current status of the transaction (e.g., ACTIVE, PAID, COMPLETED).",
            "example": "ACTIVE"
          },
          "paidAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "accessCode": {
            "type": "string",
            "description": "Unique code for this transaction.",
            "example": "a1b2c3d4-e5f6-7890-1234-567890abcdef"
          },
          "userId": {
            "type": "integer",
            "nullable": true
          },
          "vehicleDetailId": {
            "type": "integer"
          },
          "parkingLevelId": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "TransactionCreate": {
        "description": "Payload for creating a new transaction when a vehicle enters.",
        "type": "object",
        "required": ["plateNumber", "categoryId", "parkingLevelId"],
        "properties": {
          "plateNumber": {
            "type": "string",
            "example": "D4321ABC"
          },
          "categoryId": {
            "type": "integer",
            "example": 3
          },
          "parkingLevelId": {
            "type": "integer",
            "example": 2
          }
        }
      },
      "TransactionUpdate": {
        "type": "object",
        "description": "Payload for an admin to manually update a transaction.",
        "properties": {
          "status": {
            "type": "string",
            "example": "PAID"
          },
          "paidAmount": {
            "type": "number",
            "format": "double",
            "example": 25.5
          }
        }
      },
      "LoginMember": {
        "type": "object",
        "required": ["name", "password"],
        "properties": {
          "name": {
            "type": "string",
            "description": "The member's username.",
            "example": "john.doe"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "strongpassword123"
          }
        }
      },
      "ApiErrorResponse": {
        "type": "object",
        "required": ["success", "message"],
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "nullable": true,
            "required": ["errorCode"],
            "properties": {
              "errorCode": {
                "type": "string",
                "description": "A unique, machine-readable error code.",
                "example": "RESOURCE_NOT_FOUND"
              },
              "errorMeta": {
                "type": "array",
                "description": "Optional metadata for validation errors.",
                "items": {
                  "type": "object",
                  "properties": {
                    "field": {
                      "type": "string",
                      "example": "password"
                    },
                    "issue": {
                      "type": "string",
                      "example": "Password must be at least 8 characters long."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "UserArrayResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "TokenResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "token": {
                "type": "string"
              }
            }
          }
        }
      },
      "MemberResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Member"
          }
        }
      },
      "MemberArrayResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            }
          }
        }
      },
      "TransactionResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Transaction"
          }
        }
      },
      "TransactionArrayResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          }
        }
      },
      "DashboardSummaryResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/DashboardSummary"
          }
        }
      },
      "ParkingLevelResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/ParkingLevel"
          }
        }
      },
      "ParkingLevelArrayResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParkingLevel"
            }
          }
        }
      },
      "CategoryResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Category"
          }
        }
      },
      "CategoryArrayResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          }
        }
      },
      "PriceResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Price"
          }
        }
      },
      "PriceArrayResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Price"
            }
          }
        }
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "nullable": true
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Member or Admin Login",
        "description": "Authenticates a member or admin and returns a JWT token.",
        "operationId": "loginUser",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginMember"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request body is missing required fields or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The provided credentials (name or password) are incorrect.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The user account is locked or inactive.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. An unexpected error occurred on the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["Users"],
        "summary": "List all users (Admin only)",
        "description": "Retrieves a list of all user accounts. This operation is restricted to admin users.",
        "operationId": "listUsers",
        "responses": {
          "200": {
            "description": "A list of users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserArrayResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. User does not have the necessary permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Users"],
        "summary": "Create a new user (Admin only)",
        "description": "Creates a new user account in the system. This operation is restricted to admin users.",
        "operationId": "createUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request body contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. User does not have the necessary permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user by ID (Admin only)",
        "description": "Retrieves the details of a specific user by their unique ID. This operation is restricted to admin users.",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. User does not have the necessary permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update a user (Admin only)",
        "description": "Updates a user's details. This operation is restricted to admin users.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request body contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete a user (Admin only)",
        "description": "Deletes a user from the system. This operation is restricted to admin users.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/members": {
      "get": {
        "tags": ["Members"],
        "summary": "List all members (Admin only)",
        "description": "Retrieves a list of all member records. Restricted to admins.",
        "operationId": "listMembers",
        "responses": {
          "200": {
            "description": "A list of members.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberArrayResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Members"],
        "summary": "Create a member record (Admin only)",
        "description": "Creates a new member record for an existing user. Restricted to admins.",
        "operationId": "createMember",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemberCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Member record created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request body contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/members/{id}": {
      "get": {
        "tags": ["Members"],
        "summary": "Get member by ID (Admin only)",
        "description": "Retrieves a specific member record by ID. Restricted to admins.",
        "operationId": "getMemberById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Member not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Members"],
        "summary": "Update a member (Admin only)",
        "description": "Updates a member record. Restricted to admins.",
        "operationId": "updateMember",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "endedAt": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Member updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request body contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Member not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Members"],
        "summary": "Delete a member record (Admin only)",
        "description": "Deletes a member record. Restricted to admins.",
        "operationId": "deleteMember",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Member deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Member not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/members/me/renew": {
      "post": {
        "tags": ["Members"],
        "summary": "Renew a membership",
        "description": "Allows the currently authenticated member to extend their membership subscription.",
        "operationId": "renewCurrentMember",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MembershipRenewal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Membership renewed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request or payment failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/members/me/transactions": {
      "get": {
        "tags": ["Members"],
        "summary": "Get member's transaction history",
        "description": "Fetches a list of all parking transactions for the authenticated member.",
        "operationId": "getCurrentMemberTransactions",
        "responses": {
          "200": {
            "description": "A list of transactions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionArrayResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transactions": {
      "get": {
        "tags": ["Transactions"],
        "summary": "List all transactions (Admin only)",
        "description": "Retrieves a list of all transactions. Restricted to admins.",
        "operationId": "listTransactions",
        "responses": {
          "200": {
            "description": "A list of transactions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionArrayResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/entry": {
      "post": {
        "tags": ["Transactions"],
        "summary": "Create a new transaction (vehicle entry)",
        "description": "This endpoint is called when a vehicle enters the parking facility. It creates a vehicle detail and a new transaction record.",
        "operationId": "createEntryTransaction",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Transaction created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request body contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{accessCode}": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Get Transaction Status (Guest)",
        "description": "Allows a guest to retrieve the status of their active parking transaction using the access code from their ticket. This endpoint is public and does not require authentication.",
        "operationId": "getGuestTransactionByAccessCode",
        "security": [],
        "parameters": [
          {
            "name": "accessCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{accessCode}/payment": {
      "post": {
        "tags": ["Transactions"],
        "summary": "Process payment for a transaction",
        "description": "Processes a payment for an active transaction and updates its status.",
        "operationId": "processTransactionPayment",
        "parameters": [
          {
            "name": "accessCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "paidAmount": {
                    "type": "number",
                    "example": 15.75
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request body contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{accessCode}/exit": {
      "post": {
        "tags": ["Transactions"],
        "summary": "Complete a transaction (vehicle exit)",
        "description": "Marks a transaction as completed when a vehicle exits the parking facility. The final fee is calculated and status updated.",
        "operationId": "completeTransaction",
        "parameters": [
          {
            "name": "accessCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vehicle exit processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request body contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/manage/{id}": {
      "put": {
        "tags": ["Transactions"],
        "summary": "Manually update a transaction (Admin only)",
        "description": "Allows an admin to manually update transaction details by its primary ID. Restricted to admins.",
        "operationId": "updateTransactionById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transaction updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request body contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Transactions"],
        "summary": "Delete a transaction (Admin only)",
        "description": "Allows an admin to delete/void a transaction by its primary ID. Restricted to admins.",
        "operationId": "deleteTransactionById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/dashboard/summary": {
      "get": {
        "tags": ["Dashboard"],
        "summary": "Get dashboard summary",
        "description": "Retrieves summary data for the dashboard. The response varies based on the user's role (Admin or Member).",
        "operationId": "getDashboardSummary",
        "responses": {
          "200": {
            "description": "Dashboard summary data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardSummaryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/parking-levels": {
      "get": {
        "tags": ["Parking Levels"],
        "summary": "List all parking levels",
        "description": "Returns a list of all available parking levels in the facility.",
        "operationId": "listParkingLevels",
        "security": [],
        "responses": {
          "200": {
            "description": "A list of parking levels",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParkingLevelArrayResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Parking Levels"],
        "summary": "Create a parking level (Admin only)",
        "description": "Creates a new parking level. Restricted to admins.",
        "operationId": "createParkingLevel",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParkingLevelCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Parking level created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParkingLevelResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request body contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/parking-levels/{id}": {
      "get": {
        "tags": ["Parking Levels"],
        "summary": "Get parking level by ID",
        "description": "Retrieves details for a specific parking level.",
        "operationId": "getParkingLevelById",
        "security": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParkingLevelResponse"
                }
              }
            }
          },
          "404": {
            "description": "Parking level not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Parking Levels"],
        "summary": "Update a parking level (Admin only)",
        "description": "Updates a parking level. Restricted to admins.",
        "operationId": "updateParkingLevel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParkingLevelCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Parking level updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParkingLevelResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request body contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Parking level not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Parking Levels"],
        "summary": "Delete a parking level (Admin only)",
        "description": "Deletes a parking level. Restricted to admins.",
        "operationId": "deleteParkingLevel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Parking level deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Parking level not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": ["Categories"],
        "summary": "List all vehicle categories",
        "description": "Returns a list of all vehicle categories.",
        "operationId": "listCategories",
        "security": [],
        "responses": {
          "200": {
            "description": "A list of categories.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryArrayResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Categories"],
        "summary": "Create a vehicle category (Admin only)",
        "description": "Creates a new vehicle category. Restricted to admins.",
        "operationId": "createCategory",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request body contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/categories/{id}": {
      "get": {
        "tags": ["Categories"],
        "summary": "Get category by ID",
        "description": "Retrieves details for a specific vehicle category.",
        "operationId": "getCategoryById",
        "security": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponse"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Categories"],
        "summary": "Update a category (Admin only)",
        "description": "Updates a vehicle category. Restricted to admins.",
        "operationId": "updateCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request body contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Category not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Categories"],
        "summary": "Delete a category (Admin only)",
        "description": "Deletes a vehicle category. Restricted to admins.",
        "operationId": "deleteCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Category not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prices": {
      "get": {
        "tags": ["Prices"],
        "summary": "List all prices",
        "description": "Returns a list of all price configurations.",
        "operationId": "listPrices",
        "security": [],
        "responses": {
          "200": {
            "description": "A list of prices.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceArrayResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Prices"],
        "summary": "Create a price (Admin only)",
        "description": "Creates a new price configuration. Restricted to admins.",
        "operationId": "createPrice",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PriceCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Price created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request body contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prices/{id}": {
      "get": {
        "tags": ["Prices"],
        "summary": "Get price by ID",
        "description": "Retrieves details for a specific price configuration.",
        "operationId": "getPriceById",
        "security": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceResponse"
                }
              }
            }
          },
          "404": {
            "description": "Price not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Prices"],
        "summary": "Update a price (Admin only)",
        "description": "Updates a price configuration. Restricted to admins.",
        "operationId": "updatePrice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PriceCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Price updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request body contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Price not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Prices"],
        "summary": "Delete a price (Admin only)",
        "description": "Deletes a price configuration. Restricted to admins.",
        "operationId": "deletePrice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Price deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Price not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/vehicle-details": {
      "get": {
        "tags": ["Vehicle Details"],
        "summary": "List all vehicle details",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of vehicle details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VehicleDetail"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Vehicle Details"],
        "summary": "Create a new vehicle detail",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VehicleDetailCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vehicle detail created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleDetail"
                }
              }
            }
          }
        }
      }
    },
    "/vehicle-details/{id}": {
      "get": {
        "tags": ["Vehicle Details"],
        "summary": "Get vehicle detail by ID",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleDetail"
                }
              }
            }
          },
          "404": {
            "description": "Vehicle detail not found"
          }
        }
      },
      "put": {
        "tags": ["Vehicle Details"],
        "summary": "Update a vehicle detail",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VehicleDetailUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vehicle detail updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleDetail"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Vehicle Details"],
        "summary": "Delete a vehicle detail",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Vehicle detail deleted successfully"
          },
          "404": {
            "description": "Vehicle detail not found"
          }
        }
      }
    }
  }
}
