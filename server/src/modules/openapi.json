{
  "openapi": "3.0.3",
  "info": {
    "title": "Parking Management API",
    "description": "API for managing users, parking levels, vehicles, and transactions for a parking facility.\nThis documentation provides a base for all the resources defined in the database schema.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.example.com/v1",
      "description": "Production Server"
    }
  ],
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the user.",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "role": {
            "type": "string",
            "description": "Role of the user (e.g., admin, member, staff).",
            "example": "member"
          }
        }
      },
      "UserCreate": {
        "type": "object",
        "required": ["name", "password", "role"],
        "properties": {
          "name": {
            "type": "string",
            "example": "Jane Doe"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "strongpassword123"
          },
          "role": {
            "type": "string",
            "example": "staff"
          }
        }
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Jane Doe Smith"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "newstrongpassword456"
          },
          "role": {
            "type": "string",
            "example": "admin"
          }
        }
      },
      "ParkingLevel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Level A1"
          },
          "max_weight": {
            "type": "number",
            "format": "double",
            "description": "Maximum allowed weight in kilograms for this level.",
            "example": 2500.5
          }
        }
      },
      "ParkingLevelCreate": {
        "type": "object",
        "required": ["name", "max_weight"],
        "properties": {
          "name": {
            "type": "string",
            "example": "Level B1"
          },
          "max_weight": {
            "type": "number",
            "format": "double",
            "description": "Maximum allowed weight in kilograms for this level.",
            "example": 3000
          }
        }
      },
      "ParkingLevelUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Level B1 - Heavy Duty"
          },
          "max_weight": {
            "type": "number",
            "format": "double",
            "description": "Maximum allowed weight in kilograms for this level.",
            "example": 3500
          }
        }
      },
      "Member": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 101
          },
          "user_id": {
            "type": "integer",
            "example": 1
          },
          "joined_at": {
            "type": "string",
            "format": "date-time"
          },
          "ended_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "MemberCreate": {
        "type": "object",
        "required": ["user_id", "ended_at"],
        "properties": {
          "user_id": {
            "type": "integer",
            "example": 1
          },
          "ended_at": {
            "type": "string",
            "format": "date-time",
            "example": "2026-09-20T10:00:00Z"
          }
        }
      },
      "MemberUpdate": {
        "type": "object",
        "properties": {
          "ended_at": {
            "type": "string",
            "format": "date-time",
            "example": "2027-09-20T10:00:00Z"
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the vehicle category.",
            "example": "Motorcycle"
          },
          "weight": {
            "type": "number",
            "format": "double",
            "description": "Average weight of vehicles in this category.",
            "example": 200
          }
        }
      },
      "CategoryCreate": {
        "type": "object",
        "required": ["name", "weight"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the vehicle category.",
            "example": "Car"
          },
          "weight": {
            "type": "number",
            "format": "double",
            "description": "Average weight of vehicles in this category.",
            "example": 1500
          }
        }
      },
      "CategoryUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the vehicle category.",
            "example": "SUV"
          },
          "weight": {
            "type": "number",
            "format": "double",
            "description": "Average weight of vehicles in this category.",
            "example": 2000
          }
        }
      },
      "Price": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "category_id": {
            "type": "integer",
            "example": 1
          },
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Price per hour for this category.",
            "example": 2.5
          }
        }
      },
      "PriceCreate": {
        "type": "object",
        "required": ["amount", "category_id"],
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Price per hour for this category.",
            "example": 3.0
          },
          "category_id": {
            "type": "integer",
            "example": 1
          }
        }
      },
      "PriceUpdate": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Price per hour for this category.",
            "example": 3.5
          },
          "category_id": {
            "type": "integer",
            "example": 1
          }
        }
      },
      "VehicleDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 501
          },
          "plate_number": {
            "type": "string",
            "example": "B1234XYZ"
          },
          "category_id": {
            "type": "integer",
            "example": 2
          }
        }
      },
      "VehicleDetailCreate": {
        "type": "object",
        "required": ["plate_number", "category_id"],
        "properties": {
          "plate_number": {
            "type": "string",
            "example": "B1234XYZ"
          },
          "category_id": {
            "type": "integer",
            "example": 2
          }
        }
      },
      "VehicleDetailUpdate": {
        "type": "object",
        "properties": {
          "plate_number": {
            "type": "string",
            "example": "B5678ABC"
          },
          "category_id": {
            "type": "integer",
            "example": 3
          }
        }
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1001
          },
          "status": {
            "type": "string",
            "description": "Current status of the transaction (e.g., ACTIVE, PAID, COMPLETED).",
            "example": "ACTIVE"
          },
          "paid_amount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "access_code": {
            "type": "string",
            "description": "Unique code for this transaction.",
            "example": "a1b2c3d4-e5f6-7890-1234-567890abcdef"
          },
          "user_id": {
            "type": "integer",
            "nullable": true
          },
          "vehicle_detail_id": {
            "type": "integer"
          },
          "parking_level_id": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "TransactionCreate": {
        "description": "Payload for creating a new transaction when a vehicle enters.",
        "type": "object",
        "required": ["plate_number", "category_id", "parking_level_id"],
        "properties": {
          "plate_number": {
            "type": "string",
            "example": "D4321ABC"
          },
          "category_id": {
            "type": "integer",
            "example": 3
          },
          "parking_level_id": {
            "type": "integer",
            "example": 2
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User Login",
        "description": "Authenticate a user and receive a JWT token.",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "admin"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "adminpass"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["Users"],
        "summary": "List all users",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Users"],
        "summary": "Create a new user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user by ID",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update a user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete a user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/transactions/entry": {
      "post": {
        "tags": ["Transactions"],
        "summary": "Create a new transaction (vehicle entry)",
        "description": "This endpoint is called when a vehicle enters the parking facility. It creates a vehicle detail and a new transaction record.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Transaction created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{access_code}": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Get transaction details by access code",
        "parameters": [
          {
            "name": "access_code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found"
          }
        }
      }
    },
    "/transactions/{access_code}/payment": {
      "post": {
        "tags": ["Transactions"],
        "summary": "Process payment for a transaction",
        "parameters": [
          {
            "name": "access_code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "paid_amount": {
                    "type": "number",
                    "example": 15.75
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": ["Categories"],
        "summary": "List all categories",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of categories.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Categories"],
        "summary": "Create a new category",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          }
        }
      }
    },
    "/categories/{id}": {
      "get": {
        "tags": ["Categories"],
        "summary": "Get category by ID",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "404": {
            "description": "Category not found"
          }
        }
      },
      "put": {
        "tags": ["Categories"],
        "summary": "Update a category",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Categories"],
        "summary": "Delete a category",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Category deleted successfully"
          },
          "404": {
            "description": "Category not found"
          }
        }
      }
    },
    "/prices": {
      "get": {
        "tags": ["Prices"],
        "summary": "List all prices",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of prices.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Price"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Prices"],
        "summary": "Create a new price",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PriceCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Price created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Price"
                }
              }
            }
          }
        }
      }
    },
    "/prices/{id}": {
      "get": {
        "tags": ["Prices"],
        "summary": "Get price by ID",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Price"
                }
              }
            }
          },
          "404": {
            "description": "Price not found"
          }
        }
      },
      "put": {
        "tags": ["Prices"],
        "summary": "Update a price",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PriceUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Price updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Price"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Prices"],
        "summary": "Delete a price",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Price deleted successfully"
          },
          "404": {
            "description": "Price not found"
          }
        }
      }
    },
    "/vehicle-details": {
      "get": {
        "tags": ["Vehicle Details"],
        "summary": "List all vehicle details",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of vehicle details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VehicleDetail"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Vehicle Details"],
        "summary": "Create a new vehicle detail",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VehicleDetailCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vehicle detail created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleDetail"
                }
              }
            }
          }
        }
      }
    },
    "/vehicle-details/{id}": {
      "get": {
        "tags": ["Vehicle Details"],
        "summary": "Get vehicle detail by ID",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleDetail"
                }
              }
            }
          },
          "404": {
            "description": "Vehicle detail not found"
          }
        }
      },
      "put": {
        "tags": ["Vehicle Details"],
        "summary": "Update a vehicle detail",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VehicleDetailUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vehicle detail updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleDetail"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Vehicle Details"],
        "summary": "Delete a vehicle detail",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Vehicle detail deleted successfully"
          },
          "404": {
            "description": "Vehicle detail not found"
          }
        }
      }
    },
    "/members": {
      "get": {
        "tags": ["Members"],
        "summary": "List all members",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of members.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Member"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Members"],
        "summary": "Create a new member",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemberCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Member created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          }
        }
      }
    },
    "/members/{id}": {
      "get": {
        "tags": ["Members"],
        "summary": "Get member by ID",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          },
          "404": {
            "description": "Member not found"
          }
        }
      },
      "put": {
        "tags": ["Members"],
        "summary": "Update a member's details",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemberUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Member updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Members"],
        "summary": "Delete a member",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Member deleted successfully"
          },
          "404": {
            "description": "Member not found"
          }
        }
      }
    },
    "/parking_levels": {
      "get": {
        "tags": ["Parking Levels"],
        "summary": "List all parking levels",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of parking levels",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParkingLevel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Parking Levels"],
        "summary": "Create a new parking level",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParkingLevelCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Parking level created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParkingLevel"
                }
              }
            }
          }
        }
      }
    },
    "/parking_levels/{id}": {
      "get": {
        "tags": ["Parking Levels"],
        "summary": "Get parking level by ID",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParkingLevel"
                }
              }
            }
          },
          "404": {
            "description": "Parking level not found"
          }
        }
      },
      "put": {
        "tags": ["Parking Levels"],
        "summary": "Update a parking level",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParkingLevelUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Parking level updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParkingLevel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Parking Levels"],
        "summary": "Delete a parking level",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Parking level deleted successfully"
          },
          "404": {
            "description": "Parking level not found"
          }
        }
      }
    }
  }
}
